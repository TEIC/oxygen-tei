namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace ns1 = "http://www.isocat.org/ns/dcr"
namespace rng = "http://relaxng.org/ns/structure/1.0"
namespace sch = "http://purl.oclc.org/dsdl/schematron"

# Schema generated 2012-06-18T08:40:58Z
# Edition: 2.1.0. Last updated on 17th June 2012.
# This material is dual-licensed.
# 
#	  [http://creativecommons.org/licenses/by/3.0/] 
#	    Distributed under a Creative Commons Attribution 3.0 Unported License.
# 
#	  [http://www.opensource.org/licenses/BSD-2-Clause] 
#	    Copyright 2012 TEI Consortium.
#	    All rights reserved.
# 
#	    Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
# 
#	      Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#	      Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
# 
# 
# 
# This software is provided by the copyright holders and contributors
# "as is" and any express or implied warranties, including, but not
# limited to, the implied warranties of merchantability and fitness for
# a particular purpose are disclaimed. In no event shall the copyright
# holder or contributors be liable for any direct, indirect, incidental,
# special, exemplary, or consequential damages (including, but not
# limited to, procurement of substitute goods or services; loss of use,
# data, or profits; or business interruption) however caused and on any
# theory of liability, whether in contract, strict liability, or tort
# (including negligence or otherwise) arising in any way out of the use
# of this software, even if advised of the possibility of such
# damage.
# 
#	  TEI  material can be licensed differently depending on the use you intend to 
# make of it. Hence it is made available under both the CC+BY and BSD-2 
# licences.  The CC+BY licence is generally appropriate for usages which 
# treat TEI content as data or documentation. The BSD-2 licence is 
# generally appropriate for usage of TEI content in a software 
# environment. For further information or clarification, please contact 
# the TEI Consortium.
# 
#	 Declarations for classes, datatypes, and macros available to all
# TEI modules

# Definitions from module tei

# Set global predeclared macros
TEI |= notAllowed
ab |= notAllowed
abbr |= notAllowed
accMat |= notAllowed
acquisition |= notAllowed
activity |= notAllowed
actor |= notAllowed
add |= notAllowed
addName |= notAllowed
addSpan |= notAllowed
additional |= notAllowed
additions |= notAllowed
addrLine |= notAllowed
address |= notAllowed
adminInfo |= notAllowed
affiliation |= notAllowed
age |= notAllowed
alt |= notAllowed
altGrp |= notAllowed
altIdent |= notAllowed
altIdentifier |= notAllowed
am |= notAllowed
analytic |= notAllowed
anchor |= notAllowed
app |= notAllowed
appInfo |= notAllowed
application |= notAllowed
arc |= notAllowed
argument |= notAllowed
att |= notAllowed
attDef |= notAllowed
attList |= notAllowed
attRef |= notAllowed
author |= notAllowed
authority |= notAllowed
availability |= notAllowed
back |= notAllowed
bibl |= notAllowed
biblFull |= notAllowed
biblScope |= notAllowed
biblStruct |= notAllowed
bicond |= notAllowed
binary |= notAllowed
binaryObject |= notAllowed
binding |= notAllowed
bindingDesc |= notAllowed
birth |= notAllowed
bloc |= notAllowed
body |= notAllowed
broadcast |= notAllowed
byline |= notAllowed
c |= notAllowed
cRefPattern |= notAllowed
caesura |= notAllowed
calendar |= notAllowed
calendarDesc |= notAllowed
camera |= notAllowed
caption |= notAllowed
case |= notAllowed
castGroup |= notAllowed
castItem |= notAllowed
castList |= notAllowed
catDesc |= notAllowed
catRef |= notAllowed
catchwords |= notAllowed
category |= notAllowed
cb |= notAllowed
cell |= notAllowed
certainty |= notAllowed
change |= notAllowed
channel |= notAllowed
char |= notAllowed
charDecl |= notAllowed
charName |= notAllowed
charProp |= notAllowed
choice |= notAllowed
cit |= notAllowed
cl |= notAllowed
classCode |= notAllowed
classDecl |= notAllowed
classRef |= notAllowed
classSpec |= notAllowed
classes |= notAllowed
climate |= notAllowed
closer |= notAllowed
code |= notAllowed
collation |= notAllowed
collection |= notAllowed
colloc |= notAllowed
colophon |= notAllowed
cond |= notAllowed
condition |= notAllowed
constitution |= notAllowed
constraint |= notAllowed
constraintSpec |= notAllowed
content |= notAllowed
corr |= notAllowed
correction |= notAllowed
country |= notAllowed
creation |= notAllowed
custEvent |= notAllowed
custodialHist |= notAllowed
damage |= notAllowed
damageSpan |= notAllowed
datatype |= notAllowed
date |= notAllowed
dateline |= notAllowed
death |= notAllowed
decoDesc |= notAllowed
decoNote |= notAllowed
def |= notAllowed
\default |= notAllowed
defaultVal |= notAllowed
del |= notAllowed
delSpan |= notAllowed
depth |= notAllowed
derivation |= notAllowed
desc |= notAllowed
dictScrap |= notAllowed
dim |= notAllowed
dimensions |= notAllowed
distinct |= notAllowed
distributor |= notAllowed
district |= notAllowed
\div |= notAllowed
div1 |= notAllowed
div2 |= notAllowed
div3 |= notAllowed
div4 |= notAllowed
div5 |= notAllowed
div6 |= notAllowed
div7 |= notAllowed
divGen |= notAllowed
docAuthor |= notAllowed
docDate |= notAllowed
docEdition |= notAllowed
docImprint |= notAllowed
docTitle |= notAllowed
domain |= notAllowed
eLeaf |= notAllowed
eTree |= notAllowed
edition |= notAllowed
editionStmt |= notAllowed
editor |= notAllowed
editorialDecl |= notAllowed
education |= notAllowed
eg |= notAllowed
egXML |= notAllowed
elementRef |= notAllowed
elementSpec |= notAllowed
email |= notAllowed
emph |= notAllowed
encodingDesc |= notAllowed
entry |= notAllowed
entryFree |= notAllowed
epigraph |= notAllowed
epilogue |= notAllowed
equipment |= notAllowed
equiv |= notAllowed
etym |= notAllowed
event |= notAllowed
ex |= notAllowed
exemplum |= notAllowed
expan |= notAllowed
explicit |= notAllowed
extent |= notAllowed
f |= notAllowed
fDecl |= notAllowed
fDescr |= notAllowed
fLib |= notAllowed
facsimile |= notAllowed
factuality |= notAllowed
faith |= notAllowed
figDesc |= notAllowed
figure |= notAllowed
fileDesc |= notAllowed
filiation |= notAllowed
finalRubric |= notAllowed
floatingText |= notAllowed
floruit |= notAllowed
foliation |= notAllowed
foreign |= notAllowed
forename |= notAllowed
forest |= notAllowed
form |= notAllowed
formula |= notAllowed
front |= notAllowed
fs |= notAllowed
fsConstraints |= notAllowed
fsDecl |= notAllowed
fsDescr |= notAllowed
fsdDecl |= notAllowed
fsdLink |= notAllowed
funder |= notAllowed
fvLib |= notAllowed
fw |= notAllowed
g |= notAllowed
gap |= notAllowed
gb |= notAllowed
gen |= notAllowed
genName |= notAllowed
geo |= notAllowed
geoDecl |= notAllowed
geogFeat |= notAllowed
geogName |= notAllowed
gi |= notAllowed
gloss |= notAllowed
glyph |= notAllowed
glyphName |= notAllowed
gram |= notAllowed
gramGrp |= notAllowed
graph |= notAllowed
graphic |= notAllowed
group |= notAllowed
handDesc |= notAllowed
handNote |= notAllowed
handNotes |= notAllowed
handShift |= notAllowed
head |= notAllowed
headItem |= notAllowed
headLabel |= notAllowed
height |= notAllowed
heraldry |= notAllowed
hi |= notAllowed
history |= notAllowed
hom |= notAllowed
hyph |= notAllowed
hyphenation |= notAllowed
iNode |= notAllowed
iType |= notAllowed
ident |= notAllowed
idno |= notAllowed
if |= notAllowed
iff |= notAllowed
imprimatur |= notAllowed
imprint |= notAllowed
incident |= notAllowed
incipit |= notAllowed
index |= notAllowed
institution |= notAllowed
interaction |= notAllowed
interp |= notAllowed
interpGrp |= notAllowed
interpretation |= notAllowed
item |= notAllowed
join |= notAllowed
joinGrp |= notAllowed
keywords |= notAllowed
kinesic |= notAllowed
l |= notAllowed
label |= notAllowed
lacunaEnd |= notAllowed
lacunaStart |= notAllowed
lang |= notAllowed
langKnowledge |= notAllowed
langKnown |= notAllowed
langUsage |= notAllowed
language |= notAllowed
layout |= notAllowed
layoutDesc |= notAllowed
lb |= notAllowed
lbl |= notAllowed
leaf |= notAllowed
lem |= notAllowed
lg |= notAllowed
licence |= notAllowed
line |= notAllowed
link |= notAllowed
linkGrp |= notAllowed
\list |= notAllowed
listBibl |= notAllowed
listChange |= notAllowed
listEvent |= notAllowed
listForest |= notAllowed
listNym |= notAllowed
listOrg |= notAllowed
listPerson |= notAllowed
listPlace |= notAllowed
listRef |= notAllowed
listRelation |= notAllowed
listTranspose |= notAllowed
listWit |= notAllowed
localName |= notAllowed
locale |= notAllowed
location |= notAllowed
locus |= notAllowed
locusGrp |= notAllowed
m |= notAllowed
macroRef |= notAllowed
macroSpec |= notAllowed
mapping |= notAllowed
material |= notAllowed
measure |= notAllowed
measureGrp |= notAllowed
meeting |= notAllowed
memberOf |= notAllowed
mentioned |= notAllowed
metDecl |= notAllowed
metSym |= notAllowed
metamark |= notAllowed
milestone |= notAllowed
mod |= notAllowed
moduleRef |= notAllowed
moduleSpec |= notAllowed
monogr |= notAllowed
mood |= notAllowed
move |= notAllowed
msContents |= notAllowed
msDesc |= notAllowed
msIdentifier |= notAllowed
msItem |= notAllowed
msItemStruct |= notAllowed
msName |= notAllowed
msPart |= notAllowed
musicNotation |= notAllowed
name |= notAllowed
nameLink |= notAllowed
\namespace |= notAllowed
nationality |= notAllowed
node |= notAllowed
normalization |= notAllowed
notatedMusic |= notAllowed
note |= notAllowed
notesStmt |= notAllowed
num |= notAllowed
number |= notAllowed
numeric |= notAllowed
nym |= notAllowed
oRef |= notAllowed
oVar |= notAllowed
objectDesc |= notAllowed
objectType |= notAllowed
occupation |= notAllowed
offset |= notAllowed
opener |= notAllowed
org |= notAllowed
orgName |= notAllowed
orig |= notAllowed
origDate |= notAllowed
origPlace |= notAllowed
origin |= notAllowed
orth |= notAllowed
p |= notAllowed
pRef |= notAllowed
pVar |= notAllowed
particDesc |= notAllowed
pause |= notAllowed
pb |= notAllowed
pc |= notAllowed
per |= notAllowed
performance |= notAllowed
persName |= notAllowed
person |= notAllowed
personGrp |= notAllowed
phr |= notAllowed
physDesc |= notAllowed
place |= notAllowed
placeName |= notAllowed
population |= notAllowed
pos |= notAllowed
postBox |= notAllowed
postCode |= notAllowed
postscript |= notAllowed
precision |= notAllowed
preparedness |= notAllowed
principal |= notAllowed
profileDesc |= notAllowed
projectDesc |= notAllowed
prologue |= notAllowed
pron |= notAllowed
provenance |= notAllowed
ptr |= notAllowed
pubPlace |= notAllowed
publicationStmt |= notAllowed
publisher |= notAllowed
purpose |= notAllowed
q |= notAllowed
quotation |= notAllowed
quote |= notAllowed
rdg |= notAllowed
rdgGrp |= notAllowed
re |= notAllowed
recordHist |= notAllowed
recording |= notAllowed
recordingStmt |= notAllowed
redo |= notAllowed
ref |= notAllowed
refState |= notAllowed
refsDecl |= notAllowed
reg |= notAllowed
region |= notAllowed
relatedItem |= notAllowed
relation |= notAllowed
relationGrp |= notAllowed
remarks |= notAllowed
rendition |= notAllowed
repository |= notAllowed
residence |= notAllowed
resp |= notAllowed
respStmt |= notAllowed
respons |= notAllowed
restore |= notAllowed
retrace |= notAllowed
revisionDesc |= notAllowed
rhyme |= notAllowed
role |= notAllowed
roleDesc |= notAllowed
roleName |= notAllowed
root |= notAllowed
row |= notAllowed
rs |= notAllowed
rubric |= notAllowed
s |= notAllowed
said |= notAllowed
salute |= notAllowed
samplingDecl |= notAllowed
schemaSpec |= notAllowed
scriptDesc |= notAllowed
scriptNote |= notAllowed
scriptStmt |= notAllowed
seal |= notAllowed
sealDesc |= notAllowed
secFol |= notAllowed
seg |= notAllowed
segmentation |= notAllowed
sense |= notAllowed
series |= notAllowed
seriesStmt |= notAllowed
set |= notAllowed
setting |= notAllowed
settingDesc |= notAllowed
settlement |= notAllowed
sex |= notAllowed
shift |= notAllowed
sic |= notAllowed
signatures |= notAllowed
signed |= notAllowed
soCalled |= notAllowed
socecStatus |= notAllowed
sound |= notAllowed
source |= notAllowed
sourceDesc |= notAllowed
sourceDoc |= notAllowed
sp |= notAllowed
spGrp |= notAllowed
space |= notAllowed
span |= notAllowed
spanGrp |= notAllowed
speaker |= notAllowed
specDesc |= notAllowed
specGrp |= notAllowed
specGrpRef |= notAllowed
specList |= notAllowed
sponsor |= notAllowed
stage |= notAllowed
stamp |= notAllowed
state |= notAllowed
stdVals |= notAllowed
street |= notAllowed
stress |= notAllowed
\string |= notAllowed
subc |= notAllowed
subst |= notAllowed
substJoin |= notAllowed
summary |= notAllowed
superEntry |= notAllowed
supplied |= notAllowed
support |= notAllowed
supportDesc |= notAllowed
surface |= notAllowed
surfaceGrp |= notAllowed
surname |= notAllowed
surplus |= notAllowed
surrogates |= notAllowed
syll |= notAllowed
symbol |= notAllowed
table |= notAllowed
tag |= notAllowed
tagUsage |= notAllowed
tagsDecl |= notAllowed
taxonomy |= notAllowed
tech |= notAllowed
teiCorpus |= notAllowed
teiHeader |= notAllowed
term |= notAllowed
terrain |= notAllowed
\text |= notAllowed
textClass |= notAllowed
textDesc |= notAllowed
textLang |= notAllowed
then |= notAllowed
time |= notAllowed
timeline |= notAllowed
title |= notAllowed
titlePage |= notAllowed
titlePart |= notAllowed
titleStmt |= notAllowed
tns |= notAllowed
trailer |= notAllowed
trait |= notAllowed
transpose |= notAllowed
tree |= notAllowed
triangle |= notAllowed
typeDesc |= notAllowed
typeNote |= notAllowed
u |= notAllowed
unclear |= notAllowed
undo |= notAllowed
unicodeName |= notAllowed
usg |= notAllowed
vAlt |= notAllowed
vColl |= notAllowed
vDefault |= notAllowed
vLabel |= notAllowed
vMerge |= notAllowed
vNot |= notAllowed
vRange |= notAllowed
val |= notAllowed
valDesc |= notAllowed
valItem |= notAllowed
valList |= notAllowed
value |= notAllowed
variantEncoding |= notAllowed
view |= notAllowed
vocal |= notAllowed
w |= notAllowed
watermark |= notAllowed
when |= notAllowed
width |= notAllowed
wit |= notAllowed
witDetail |= notAllowed
witEnd |= notAllowed
witStart |= notAllowed
witness |= notAllowed
writing |= notAllowed
xr |= notAllowed
zone |= notAllowed
# Set predeclared macros

# 0. predeclared classes
att.datable.custom.attributes |= empty
att.duration.w3c.attributes |= empty
att.duration.attributes |= empty
model.entryPart |= notAllowed
model.entryPart_alternation |= notAllowed
model.entryPart_sequence |= notAllowed
model.entryPart_sequenceOptional |= notAllowed
model.entryPart_sequenceOptionalRepeatable |= notAllowed
model.entryPart_sequenceRepeatable |= notAllowed
model.global.spoken |= notAllowed
model.global.spoken_alternation |= notAllowed
model.global.spoken_sequence |= notAllowed
model.global.spoken_sequenceOptional |= notAllowed
model.global.spoken_sequenceOptionalRepeatable |= notAllowed
model.global.spoken_sequenceRepeatable |= notAllowed
model.placeNamePart |= notAllowed
model.placeNamePart_alternation |= notAllowed
model.placeNamePart_sequence |= notAllowed
model.placeNamePart_sequenceOptional |= notAllowed
model.placeNamePart_sequenceOptionalRepeatable |= notAllowed
model.placeNamePart_sequenceRepeatable |= notAllowed
model.placeStateLike |= notAllowed
model.placeStateLike_alternation |= notAllowed
model.placeStateLike_sequence |= notAllowed
model.placeStateLike_sequenceOptional |= notAllowed
model.placeStateLike_sequenceOptionalRepeatable |= notAllowed
model.placeStateLike_sequenceRepeatable |= notAllowed
model.placeEventLike |= notAllowed
model.placeEventLike_alternation |= notAllowed
model.placeEventLike_sequence |= notAllowed
model.placeEventLike_sequenceOptional |= notAllowed
model.placeEventLike_sequenceOptionalRepeatable |= notAllowed
model.placeEventLike_sequenceRepeatable |= notAllowed
model.orgPart |= notAllowed
model.orgPart_alternation |= notAllowed
model.orgPart_sequence |= notAllowed
model.orgPart_sequenceOptional |= notAllowed
model.orgPart_sequenceOptionalRepeatable |= notAllowed
model.orgPart_sequenceRepeatable |= notAllowed
model.persNamePart |= notAllowed
model.persNamePart_alternation |= notAllowed
model.persNamePart_sequence |= notAllowed
model.persNamePart_sequenceOptional |= notAllowed
model.persNamePart_sequenceOptionalRepeatable |= notAllowed
model.persNamePart_sequenceRepeatable |= notAllowed
att.metrical.attributes |= empty
att.enjamb.attributes |= empty
model.divPart.spoken |= notAllowed
model.divPart.spoken_alternation |= notAllowed
model.divPart.spoken_sequence |= notAllowed
model.divPart.spoken_sequenceOptional |= notAllowed
model.divPart.spoken_sequenceOptionalRepeatable |= notAllowed
model.divPart.spoken_sequenceRepeatable |= notAllowed
model.entryLike |= notAllowed
model.entryLike_alternation |= notAllowed
model.entryLike_sequence |= notAllowed
model.entryLike_sequenceOptional |= notAllowed
model.entryLike_sequenceOptionalRepeatable |= notAllowed
model.entryLike_sequenceRepeatable |= notAllowed
model.ptrLike.form |= notAllowed
model.ptrLike.form_alternation |= notAllowed
model.ptrLike.form_sequence |= notAllowed
model.ptrLike.form_sequenceOptional |= notAllowed
model.ptrLike.form_sequenceOptionalRepeatable |= notAllowed
model.ptrLike.form_sequenceRepeatable |= notAllowed
att.msExcerpt.attributes |= empty
att.global.facs.attributes |= empty
att.global.change.attributes |= empty
model.resourceLike |= notAllowed
model.resourceLike_alternation |= notAllowed
model.resourceLike_sequence |= notAllowed
model.resourceLike_sequenceOptional |= notAllowed
model.resourceLike_sequenceOptionalRepeatable |= notAllowed
model.resourceLike_sequenceRepeatable |= notAllowed
model.orgStateLike |= notAllowed
model.orgStateLike_alternation |= notAllowed
model.orgStateLike_sequence |= notAllowed
model.orgStateLike_sequenceOptional |= notAllowed
model.orgStateLike_sequenceOptionalRepeatable |= notAllowed
model.orgStateLike_sequenceRepeatable |= notAllowed
att.datable.iso.attributes |= empty
att.duration.iso.attributes |= empty
att.global.linking.attributes |= empty
att.global.analytic.attributes |= empty
# 0. predeclared macros

# 1. classes
att.ascribed.attributes = att.ascribed.attribute.who
att.ascribed.attribute.who =
  
  ## indicates the person, or group of people, to whom the element content is ascribed.
  attribute who {
    list { data.pointer, data.pointer* }
  }?
att.canonical.attributes =
  att.canonical.attribute.key, att.canonical.attribute.ref
att.canonical.attribute.key =
  
  ## provides an externally-defined means of identifying the entity (or entities) being
  ##         named, using a coded value of some kind.
  attribute key { data.text }?
att.canonical.attribute.ref =
  
  ## (reference) provides an explicit means of locating a full definition for the entity being named by
  ##         means of one or more URIs.
  attribute ref {
    list { data.pointer, data.pointer* }
  }?
att.ranging.attributes =
  att.ranging.attribute.atLeast,
  att.ranging.attribute.atMost,
  att.ranging.attribute.min,
  att.ranging.attribute.max,
  att.ranging.attribute.confidence
att.ranging.attribute.atLeast =
  
  ## gives a minimum estimated value for the approximate measurement.
  attribute atLeast { data.numeric }?
att.ranging.attribute.atMost =
  
  ## gives a maximum estimated value for the approximate measurement.
  attribute atMost { data.numeric }?
att.ranging.attribute.min =
  
  ## where the measurement summarizes more than one observation
  ##       or a range, supplies the minimum value
  ##         observed.
  attribute min { data.numeric }?
att.ranging.attribute.max =
  
  ## where the measurement summarizes more than one observation
  ##         or a range, supplies the maximum value
  ##         observed.
  attribute max { data.numeric }?
att.ranging.attribute.confidence =
  
  ## The degree of statistical confidence (between zero and one) that a value falls within the range
  ##         specified by min and max, or the proportion of observed values that fall within that range.
  attribute confidence { data.probability }?
att.dimensions.attributes =
  att.ranging.attributes,
  att.dimensions.attribute.unit,
  att.dimensions.attribute.quantity,
  att.dimensions.attribute.extent,
  att.dimensions.attribute.precision,
  att.dimensions.attribute.scope
att.dimensions.attribute.unit =
  
  ## names the unit used for the measurement
  ## Suggested values include: 1] cm(centimetres) ; 2] mm(millimetres) ; 3] in(inches) ; 4] lines; 5] chars(characters) 
  attribute unit {
    
    ## (centimetres) 
    "cm"
    | 
      ## (millimetres) 
      "mm"
    | 
      ## (inches) 
      "in"
    | 
      ## lines of text
      "lines"
    | 
      ## (characters) characters of text
      "chars"
    | xsd:Name
  }?
att.dimensions.attribute.quantity =
  
  ## specifies the length in the units specified
  attribute quantity { data.numeric }?
att.dimensions.attribute.extent =
  
  ## indicates the size of the object concerned using a project-specific vocabulary combining
  ##         quantity and units in a single string of words. 
  attribute extent { data.text }?
att.dimensions.attribute.precision =
  
  ## characterizes the precision of the values specified by the other attributes.
  attribute precision { data.certainty }?
att.dimensions.attribute.scope =
  
  ## where the measurement summarizes more than one observation, specifies the applicability
  ##         of this measurement.
  ## Sample values include: 1] all; 2] most; 3] range
  attribute scope { data.enumerated }?
att.damaged.attributes =
  att.dimensions.attributes,
  att.damaged.attribute.hand,
  att.damaged.attribute.agent,
  att.damaged.attribute.degree,
  att.damaged.attribute.group
att.damaged.attribute.hand =
  
  ## In the case of damage (deliberate defacement, inking out, etc.) assignable to a distinct
  ##         hand, signifies the hand responsible for the damage.
  attribute hand { data.pointer }?
att.damaged.attribute.agent =
  
  ## categorizes the cause of the damage, if it can be identified.
  ## Sample values include: 1] rubbing; 2] mildew; 3] smoke
  attribute agent { data.enumerated }?
att.damaged.attribute.degree =
  
  ## Signifies the degree of damage according to a convenient scale. The damage tag
  ##         with the degree attribute should only be used where the text may be read with
  ##         some confidence; text supplied from other sources should be tagged as supplied.
  attribute degree { data.probability | data.certainty }?
att.damaged.attribute.group =
  
  ## assigns an arbitrary number to each stretch of damage regarded as forming part of the
  ##         same physical phenomenon.
  attribute group { data.count }?
att.breaking.attributes = att.breaking.attribute.break
att.breaking.attribute.break =
  
  ## indicates whether or not the  element
  ##	bearing this attribute should be considered to mark the end of
  ##	an orthographic token in the same way as whitespace.
  attribute break { data.enumerated }?
att.datable.w3c.attributes =
  att.datable.w3c.attribute.when,
  att.datable.w3c.attribute.notBefore,
  att.datable.w3c.attribute.notAfter,
  att.datable.w3c.attribute.from,
  att.datable.w3c.attribute.to
att.datable.w3c.attribute.when =
  
  ## supplies the value of the date or time in a standard form,
  ##       e.g. yyyy-mm-dd.
  attribute when { data.temporal.w3c }?
att.datable.w3c.attribute.notBefore =
  
  ## specifies the earliest possible date for the event in
  ##	  standard form, e.g. yyyy-mm-dd.
  attribute notBefore { data.temporal.w3c }?
att.datable.w3c.attribute.notAfter =
  
  ## specifies the latest possible date for the event in
  ##	  standard form, e.g. yyyy-mm-dd.
  attribute notAfter { data.temporal.w3c }?
att.datable.w3c.attribute.from =
  
  ## indicates the starting point of the period in standard form, e.g. yyyy-mm-dd.
  attribute from { data.temporal.w3c }?
att.datable.w3c.attribute.to =
  
  ## indicates the ending point of the period in standard
  ##	  form, e.g. yyyy-mm-dd.
  attribute to { data.temporal.w3c }?
att.datable.attributes =
  att.datable.w3c.attributes,
  att.datable.iso.attributes,
  att.datable.custom.attributes,
  att.datable.attribute.calendar,
  att.datable.attribute.period
att.datable.attribute.calendar =
  
  ## indicates the system or calendar to which the date represented by the content of this
  ##         element belongs.
  attribute calendar { data.pointer }?
att.datable.attribute.period =
  
  ## supplies a pointer to some location defining a named
  ##         period of time within which the datable item is understood to
  ##         have occurred.
  attribute period { data.pointer }?
att.datcat.attributes =
  att.datcat.attribute.datcat, att.datcat.attribute.valueDatcat
att.datcat.attribute.datcat =
  
  ## contains a PID (persistent identifier) that aligns the given element with the appropriate 
  ##         Data Category (or categories) in ISOcat.
  attribute ns1:datcat {
    list { data.pointer, data.pointer* }
  }?
att.datcat.attribute.valueDatcat =
  
  ## contains a PID (persistent identifier) that aligns the content of the given
  ##         element or the value of the given attribute with the appropriate simple Data
  ##         Category (or categories) in ISOcat.
  attribute ns1:valueDatcat {
    list { data.pointer, data.pointer* }
  }?
att.declarable.attributes = att.declarable.attribute.default
att.declarable.attribute.default =
  
  ## indicates whether or not this element is selected by default when
  ## its parent is selected.
  [ a:defaultValue = "false" ]
  attribute default {
    
    ## This element is selected if its parent is selected
    "true"
    | 
      ## This element can only be selected explicitly, unless it is the
      ## only one of its kind, in which case it is selected if its parent is selected.
      "false"
  }?
att.declaring.attributes = att.declaring.attribute.decls
att.declaring.attribute.decls =
  
  ## identifies one or more declarable elements within the
  ## header, which are understood to apply to the element bearing this
  ## attribute and its content.
  attribute decls {
    list { data.pointer, data.pointer* }
  }?
att.divLike.attributes =
  att.metrical.attributes,
  att.divLike.attribute.org,
  att.divLike.attribute.sample,
  att.divLike.attribute.part
att.divLike.attribute.org =
  
  ## (organization) specifies how the content of the division is organized.
  [ a:defaultValue = "uniform" ]
  attribute org {
    
    ## composite content: i.e. no claim is made about the
    ##		  sequence in which the immediate contents of this division
    ##		  are to be processed, or their inter-relationships.
    "composite"
    | 
      ## uniform content: i.e. the immediate contents of this
      ##		  element are regarded as forming a logical unit, to be
      ##		  processed in sequence.
      "uniform"
  }?
att.divLike.attribute.sample =
  
  ## indicates whether this division is a sample of the
  ##		original source and if so, from which part.
  [ a:defaultValue = "complete" ]
  attribute sample {
    
    ## division lacks material present at end in source.
    "initial"
    | 
      ## division lacks material at start and end.
      "medial"
    | 
      ## division lacks material at start.
      "final"
    | 
      ## position of sampled material within original unknown.
      "unknown"
    | 
      ## division is not a sample.
      "complete"
  }?
att.divLike.attribute.part =
  
  ## specifies whether or not the division is fragmented by
  ##		some other structural element, for example a speech which is
  ##		divided between two or more verse stanzas.
  [ a:defaultValue = "N" ]
  attribute part {
    
    ## (yes) the division is incomplete in some respect
    "Y"
    | 
      ## (no) either the division is complete, or no claim is made as to its completeness.
      "N"
    | 
      ## (initial) the initial part of an incomplete division
      "I"
    | 
      ## (medial) a medial part of an incomplete division
      "M"
    | 
      ## (final) the final part of an incomplete division
      "F"
  }?
att.docStatus.attributes = att.docStatus.attribute.status
att.docStatus.attribute.status =
  
  ## describes the status of a document either currently or, when
  ## associated with a dated element, at the time indicated.
  ## Sample values include: 1] approved; 2] candidate; 3] cleared; 4] deprecated; 5] draft; 6] embargoed; 7] expired; 8] frozen; 9] galley; 10] proposed; 11] published; 12] recommendation; 13] submitted; 14] unfinished; 15] withdrawn
  [ a:defaultValue = "draft" ] attribute status { data.enumerated }?
att.duration.w3c.attributes = att.duration.w3c.attribute.dur
att.duration.w3c.attribute.dur =
  
  ## (duration) indicates the length of this element in time.
  attribute dur { data.duration.w3c }?
att.responsibility.attributes =
  att.responsibility.attribute.cert, att.responsibility.attribute.resp
att.responsibility.attribute.cert =
  
  ## (certainty) signifies the degree of certainty associated with the intervention or interpretation.
  attribute cert { data.certainty }?
att.responsibility.attribute.resp =
  
  ## (responsible party) indicates the agency responsible for the intervention or interpretation, for example an
  ##         editor or transcriber.
  attribute resp {
    list { data.pointer, data.pointer* }
  }?
att.editLike.attributes =
  att.dimensions.attributes,
  att.responsibility.attributes,
  att.editLike.attribute.evidence,
  att.editLike.attribute.source,
  att.editLike.attribute.instant
att.editLike.attribute.evidence =
  
  ## indicates the nature of the evidence supporting the reliability or accuracy of the
  ##         intervention or interpretation.
  ## Suggested values include: 1] internal; 2] external; 3] conjecture
  attribute evidence {
    list {
      (
       ## there is internal evidence to support the intervention.
       "internal"
       | 
         ## there is external evidence to support the intervention.
         "external"
       | 
         ## the intervention or interpretation has been made by the editor, cataloguer, or
         ##             scholar on the basis of their expertise.
         "conjecture"
       | xsd:Name),
      (
       ## there is internal evidence to support the intervention.
       "internal"
       | 
         ## there is external evidence to support the intervention.
         "external"
       | 
         ## the intervention or interpretation has been made by the editor, cataloguer, or
         ##             scholar on the basis of their expertise.
         "conjecture"
       | xsd:Name)*
    }
  }?
att.editLike.attribute.source =
  
  ## contains a list of one or more pointers indicating sources
  ##       supporting the given  intervention or interpretation.
  attribute source {
    list { data.pointer, data.pointer* }
  }?
att.editLike.attribute.instant =
  
  ## Is this an instant revision?
  [ a:defaultValue = "false" ] attribute instant { data.xTruthValue }?
att.global.attributes =
  att.global.linking.attributes,
  att.global.analytic.attributes,
  att.global.facs.attributes,
  att.global.change.attributes,
  att.global.attribute.xmlid,
  att.global.attribute.n,
  att.global.attribute.xmllang,
  att.global.attribute.rend,
  att.global.attribute.rendition,
  att.global.attribute.xmlbase,
  att.global.attribute.xmlspace
att.global.attribute.xmlid =
  
  ## (identifier) provides a unique identifier for the element bearing the attribute.
  attribute xml:id { xsd:ID }?
att.global.attribute.n =
  
  ## (number) gives a number (or other label) for an element, which is not necessarily unique within
  ##         the document.
  attribute n { data.text }?
att.global.attribute.xmllang =
  
  ## (language) indicates the language of the element content using a tag generated
  ##         according to BCP 47
  ##          
  attribute xml:lang { data.language }?
att.global.attribute.rend =
  
  ## (rendition) indicates how the element in question was rendered or presented in the source text.
  attribute rend {
    list { data.word, data.word* }
  }?
att.global.attribute.rendition =
  
  ## points to a description of the rendering or presentation used for this element in the
  ##         source text.
  attribute rendition {
    list { data.pointer, data.pointer* }
  }?
att.global.attribute.xmlbase =
  
  ## provides a base URI reference with which applications can resolve relative URI
  ##         references into absolute URI references.
  attribute xml:base { data.pointer }?
att.global.attribute.xmlspace =
  
  ## signals an intention about how white space should be 
  ##       managed by  applications. 
  attribute xml:space {
    
    ## the processor should treat white space according to the
    ##	default XML white space handling rules
    "default"
    | 
      ## the processor should preserve unchanged any and all
      ##	white space in the source
      "preserve"
  }?
att.handFeatures.attributes =
  att.handFeatures.attribute.scribe,
  att.handFeatures.attribute.scribeRef,
  att.handFeatures.attribute.script,
  att.handFeatures.attribute.scriptRef,
  att.handFeatures.attribute.medium,
  att.handFeatures.attribute.scope
att.handFeatures.attribute.scribe =
  
  ## gives a name or other identifier for the scribe
  ## believed to be responsible for this hand.
  attribute scribe { data.name }?
att.handFeatures.attribute.scribeRef =
  
  ## points to a full description of the scribe concerned, typically supplied by a person element
  ##       elsewhere in the description.
  attribute scribeRef {
    list { data.pointer, data.pointer* }
  }?
att.handFeatures.attribute.script =
  
  ## characterizes the particular script or writing style used by
  ## this hand, for example secretary, copperplate, Chancery, Italian, etc.
  attribute script {
    list { data.name, data.name* }
  }?
att.handFeatures.attribute.scriptRef =
  
  ## points to a full description of the script or writing style used by
  ## this hand, typically supplied by a scriptNote element
  ##       elsewhere in the description.
  attribute scriptRef {
    list { data.pointer, data.pointer* }
  }?
att.handFeatures.attribute.medium =
  
  ## describes the tint or type of ink, e.g. brown, or other
  ## writing medium, e.g. pencil
  attribute medium { data.enumerated }?
att.handFeatures.attribute.scope =
  
  ## specifies how widely this  hand is used in the manuscript.
  attribute scope {
    
    ## only this hand is used throughout the manuscript
    "sole"
    | 
      ## this hand is used through most of the manuscript
      "major"
    | 
      ## this hand is used occasionally in the manuscript
      "minor"
  }?
att.internetMedia.attributes = att.internetMedia.attribute.mimeType
att.internetMedia.attribute.mimeType =
  
  ## (MIME media type) specifies the applicable multimedia internet mail extension (MIME) media type
  attribute mimeType {
    list { data.word, data.word* }
  }?
att.interpLike.attributes =
  att.responsibility.attributes,
  att.interpLike.attribute.type,
  att.interpLike.attribute.inst
att.interpLike.attribute.type =
  
  ## indicates what kind of phenomenon is being noted in the passage.
  ## Sample values include: 1] image; 2] character; 3] theme; 4] allusion
  attribute type { data.enumerated }?
att.interpLike.attribute.inst =
  
  ## (instances) points to instances of the analysis or interpretation represented
  ## by the current element.
  attribute inst {
    list { data.pointer, data.pointer* }
  }?
att.measurement.attributes =
  att.measurement.attribute.unit,
  att.measurement.attribute.quantity,
  att.measurement.attribute.commodity
att.measurement.attribute.unit =
  
  ## indicates the units used for the measurement, usually
  ##       using the standard symbol for the desired units.
  ## Suggested values include: 1] m(metre) ; 2] kg(kilogram) ; 3] s(second) ; 4] Hz(hertz) ; 5] Pa(pascal) ; 6] Ω(ohm) ; 7] L(litre) ; 8] t(tonne) ; 9] ha(hectare) ; 10] Å(ångström) ; 11] mL(millilitre) ; 12] cm(centimetre) ; 13] dB(decibel) ; 14] kbit(kilobit) ; 15] Kibit(kibibit) ; 16] kB(kilobyte) ; 17] KiB(kibibyte) ; 18] MB(megabyte) ; 19] MiB(mebibyte) 
  attribute unit {
    
    ## (metre) SI base unit of length
    "m"
    | 
      ## (kilogram) SI base unit of mass
      "kg"
    | 
      ## (second) SI base unit of time
      "s"
    | 
      ## (hertz) SI unit of frequency
      "Hz"
    | 
      ## (pascal) SI unit of pressure or stress
      "Pa"
    | 
      ## (ohm) SI unit of electric resistance
      "Ω"
    | 
      ## (litre) 1 dm³
      "L"
    | 
      ## (tonne) 10³ kg
      "t"
    | 
      ## (hectare) 1 hm²
      "ha"
    | 
      ## (ångström) 10⁻¹⁰ m
      "Å"
    | 
      ## (millilitre) 
      "mL"
    | 
      ## (centimetre) 
      "cm"
    | 
      ## (decibel) see remarks, below
      "dB"
    | 
      ## (kilobit) 10³ or 1000 bits
      "kbit"
    | 
      ## (kibibit) 2¹⁰ or 1024 bits
      "Kibit"
    | 
      ## (kilobyte) 10³ or 1000 bytes
      "kB"
    | 
      ## (kibibyte) 2¹⁰ or 1024 bytes
      "KiB"
    | 
      ## (megabyte) 10⁶ or 1 000 000 bytes
      "MB"
    | 
      ## (mebibyte) 2²⁰ or 1 048 576 bytes
      "MiB"
    | xsd:Name
  }?
att.measurement.attribute.quantity =
  
  ## specifies the number of the specified units that
  ##       comprise the measurement
  attribute quantity { data.numeric }?
att.measurement.attribute.commodity =
  
  ## indicates the substance that is being measured
  attribute commodity {
    list { data.word, data.word* }
  }?
att.naming.attributes =
  att.canonical.attributes,
  att.naming.attribute.role,
  att.naming.attribute.nymRef
att.naming.attribute.role =
  
  ## may be used to specify further information about the entity referenced by
  ## this name, for example the occupation of a person, or the status of a place. 
  attribute role { data.enumerated }?
att.naming.attribute.nymRef =
  
  ## (reference to the canonical name) provides a means of locating the canonical form
  ##       (nym) of the names associated with the object
  ##        named by
  ##       the element bearing it.
  attribute nymRef {
    list { data.pointer, data.pointer* }
  }?
att.placement.attributes = att.placement.attribute.place
att.placement.attribute.place =
  
  ## 
  ## Suggested values include: 1] below; 2] bottom; 3] margin; 4] top; 5] opposite; 6] overleaf; 7] above; 8] end; 9] inline; 10] inspace
  attribute place {
    list {
      (
       ## below the line
       "below"
       | 
         ## at the foot of the page
         "bottom"
       | 
         ## in the margin (left, right, or both)
         "margin"
       | 
         ## at the top of the page
         "top"
       | 
         ## on the opposite, i.e. facing, page
         "opposite"
       | 
         ## on the other side of the leaf
         "overleaf"
       | 
         ## above the line
         "above"
       | 
         ## at the end of e.g. chapter or volume.
         "end"
       | 
         ## within the body of the text.
         "inline"
       | 
         ##  in a predefined space, for example left by an earlier scribe.
         "inspace"
       | xsd:Name),
      (
       ## below the line
       "below"
       | 
         ## at the foot of the page
         "bottom"
       | 
         ## in the margin (left, right, or both)
         "margin"
       | 
         ## at the top of the page
         "top"
       | 
         ## on the opposite, i.e. facing, page
         "opposite"
       | 
         ## on the other side of the leaf
         "overleaf"
       | 
         ## above the line
         "above"
       | 
         ## at the end of e.g. chapter or volume.
         "end"
       | 
         ## within the body of the text.
         "inline"
       | 
         ##  in a predefined space, for example left by an earlier scribe.
         "inspace"
       | xsd:Name)*
    }
  }?
att.typed.attributes =
  att.typed.attribute.type, att.typed.attribute.subtype
att.typed.attribute.type =
  
  ## characterizes the element in some sense, using any convenient
  ##  classification scheme or typology.
  attribute type { data.enumerated }?
att.typed.attribute.subtype =
  
  ## provides a sub-categorization of the element, if needed
  attribute subtype { data.enumerated }?
att.pointing.attributes =
  att.pointing.attribute.targetLang,
  att.pointing.attribute.target,
  att.pointing.attribute.evaluate
att.pointing.attribute.targetLang =
  
  ## specifies the language of the content to be found at the destination referenced by target, using a language tag generated
  ##         according to BCP 47.
  attribute targetLang { data.language }?
sch:pattern [
  id = "targetLang-constraint-targetLang"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@targetLang]"
    "\x{a}" ~
    "            "
    sch:assert [
      test = "count(@target)"
      "@targetLang can only be used if @target is specified."
    ]
    "\x{a}" ~
    "          "
  ]
  "\x{a}" ~
  "   "
]
att.pointing.attribute.target =
  
  ## specifies the destination of the reference by supplying one or more URI References
  attribute target {
    list { data.pointer, data.pointer* }
  }?
att.pointing.attribute.evaluate =
  
  ## specifies the intended meaning when the target of a
  ##       pointer is itself a pointer.
  attribute evaluate {
    
    ## if the element pointed to is itself a pointer, then
    ##	  the target of that pointer will be taken, and so on, until
    ##	  an element is found which is not a pointer.
    "all"
    | 
      ## if the element pointed to is itself a pointer, then
      ##	  its target (whether a pointer or not) is taken as the target
      ##	  of this pointer.
      "one"
    | 
      ## no further evaluation of targets is carried out
      ##	  beyond that needed to find the element specified in the
      ##	  pointer's target.
      "none"
  }?
att.pointing.group.attributes =
  att.pointing.attributes,
  att.typed.attributes,
  att.pointing.group.attribute.domains,
  att.pointing.group.attribute.targFunc
att.pointing.group.attribute.domains =
  
  ## optionally specifies the identifiers of the elements
  ##       within which all elements indicated by the contents of this
  ##       element lie.
  attribute domains {
    list { data.pointer, data.pointer, data.pointer* }
  }?
att.pointing.group.attribute.targFunc =
  
  ## (target function) describes the function of each of the values of the
  ##       target attribute of the enclosed link,
  ##       join, or alt tags.
  attribute targFunc {
    list { data.word, data.word, data.word* }
  }?
att.readFrom.attributes = att.readFrom.attribute.source
att.readFrom.attribute.source =
  
  ## specifies the source from which declarations and definitions for
  ## the components of the object being defined may be obtained. 
  attribute source { xsd:anyURI }?
att.scoping.attributes =
  att.scoping.attribute.target, att.scoping.attribute.match
att.scoping.attribute.target =
  
  ## points at one or several  elements or  sets of elements by
  ##       means of one or more
  ##       data pointers, using the URI syntax.
  attribute target {
    list { data.pointer, data.pointer* }
  }?
att.scoping.attribute.match =
  
  ## supplies an arbitrary XPath expression identifying a set
  ##       of nodes, selected within the context identified by the
  ##       target attribute if this is supplied, or within the
  ##       context of the element bearing this attribute if it is not.
  ##
  attribute match { text }?
att.segLike.attributes =
  att.metrical.attributes,
  att.datcat.attributes,
  att.segLike.attribute.function,
  att.segLike.attribute.part
att.segLike.attribute.function =
  
  ## characterizes the function of the segment.
  attribute function { data.enumerated }?
att.segLike.attribute.part =
  
  ## specifies whether or not the segment is fragmented by some other
  ## structural element, for example a clause which is divided between two
  ## or more sentences.
  [ a:defaultValue = "N" ]
  attribute part {
    
    ## (yes) the segment is incomplete in some respect
    "Y"
    | 
      ## (no) either the segment is complete, or no claim is made as to
      ## its completeness
      "N"
    | 
      ## (initial) the initial part of an incomplete segment
      "I"
    | 
      ## (medial) a medial part of an incomplete segment
      "M"
    | 
      ## (final) the final part of an incomplete segment
      "F"
  }?
att.sortable.attributes = att.sortable.attribute.sortKey
att.sortable.attribute.sortKey =
  
  ## supplies the sort key for this element in an index, list or group which contains it.
  attribute sortKey { data.word }?
att.sourced.attributes = att.sourced.attribute.ed
att.sourced.attribute.ed =
  
  ## (edition) supplies an arbitrary identifier for the source edition in which
  ##       the associated feature (for example, a  page, column, or line
  ##       break) occurs at this point in the text.
  attribute ed {
    list { data.code, data.code* }
  }?
att.spanning.attributes = att.spanning.attribute.spanTo
att.spanning.attribute.spanTo =
  
  ## indicates the end of a span initiated by the element
  ##	bearing this attribute.
  attribute spanTo { data.pointer }?
att.tableDecoration.attributes =
  att.tableDecoration.attribute.role,
  att.tableDecoration.attribute.rows,
  att.tableDecoration.attribute.cols
att.tableDecoration.attribute.role =
  
  ## indicates the kind of information held in this cell or
  ## in each cell of this row.
  ## Suggested values include: 1] label; 2] data
  [ a:defaultValue = "data" ]
  attribute role {
    
    ## labelling or descriptive information only.
    "label"
    | 
      ## data values.
      "data"
    | xsd:Name
  }?
att.tableDecoration.attribute.rows =
  
  ## indicates the number of rows occupied by this cell or row.
  [ a:defaultValue = "1" ] attribute rows { data.count }?
att.tableDecoration.attribute.cols =
  
  ## (columns) indicates the number of columns occupied by this cell or
  ##	row.
  [ a:defaultValue = "1" ] attribute cols { data.count }?
att.timed.attributes =
  att.duration.w3c.attributes,
  att.timed.attribute.start,
  att.timed.attribute.end
att.timed.attribute.start =
  
  ## indicates the location within a temporal alignment at
  ##       which this element begins.
  attribute start { data.pointer }?
att.timed.attribute.end =
  
  ## indicates the location within a temporal alignment at
  ##       which this element ends.
  attribute end { data.pointer }?
att.transcriptional.attributes =
  att.editLike.attributes,
  att.transcriptional.attribute.hand,
  att.transcriptional.attribute.status,
  att.transcriptional.attribute.cause,
  att.transcriptional.attribute.seq
att.transcriptional.attribute.hand =
  
  ## signifies the hand of the agent which made the intervention.
  attribute hand { data.pointer }?
att.transcriptional.attribute.status =
  
  ## indicates the effect of the intervention, for example in
  ##       the case of a deletion, strikeouts
  ##       which include too much or too little text, or in the case of an
  ##       addition, an insertion which duplicates some of the text
  ##       already present.
  ## Sample values include: 1] duplicate; 2] duplicate-partial; 3] excessStart; 4] excessEnd; 5] shortStart; 6] shortEnd; 7] partial; 8] unremarkable
  [ a:defaultValue = "unremarkable" ]
  attribute status { data.enumerated }?
att.transcriptional.attribute.cause =
  
  ## documents the presumed cause for the intervention.
  attribute cause {
    
    ## repeated for the purpose of fixation
    "fix"
    | 
      ## repeated to clarify a previously illegible or badly written text
      ##    or mark
      "unclear"
  }?
att.transcriptional.attribute.seq =
  
  ## (sequence) assigns a sequence number related to the order in which
  ##       the encoded features carrying this attribute are believed to have occurred.
  attribute seq { data.count }?
att.translatable.attributes = att.translatable.attribute.versionDate
att.translatable.attribute.versionDate =
  
  ## specifies the date on which the source text was extracted and sent to the translator
  attribute versionDate { data.temporal.w3c }?
model.nameLike.agent = name | orgName | persName
model.nameLike.agent_alternation = name | orgName | persName
model.nameLike.agent_sequence = name, orgName, persName
model.nameLike.agent_sequenceOptional = name?, orgName?, persName?
model.nameLike.agent_sequenceOptionalRepeatable =
  name*, orgName*, persName*
model.nameLike.agent_sequenceRepeatable = name+, orgName+, persName+
model.segLike = seg | s | cl | phr | w | m | c | pc
model.segLike_alternation = seg | s | cl | phr | w | m | c | pc
model.segLike_sequence = seg, s, cl, phr, w, m, c, pc
model.segLike_sequenceOptional = seg?, s?, cl?, phr?, w?, m?, c?, pc?
model.segLike_sequenceOptionalRepeatable =
  seg*, s*, cl*, phr*, w*, m*, c*, pc*
model.segLike_sequenceRepeatable = seg+, s+, cl+, phr+, w+, m+, c+, pc+
model.hiLike = hi
model.hiLike_alternation = hi
model.hiLike_sequence = hi
model.hiLike_sequenceOptional = hi?
model.hiLike_sequenceOptionalRepeatable = hi*
model.hiLike_sequenceRepeatable = hi+
model.emphLike =
  foreign
  | emph
  | distinct
  | mentioned
  | soCalled
  | gloss
  | term
  | title
  | code
  | ident
model.emphLike_alternation =
  foreign
  | emph
  | distinct
  | mentioned
  | soCalled
  | gloss
  | term
  | title
  | code
  | ident
model.emphLike_sequence =
  foreign,
  emph,
  distinct,
  mentioned,
  soCalled,
  gloss,
  term,
  title,
  code,
  ident
model.emphLike_sequenceOptional =
  foreign?,
  emph?,
  distinct?,
  mentioned?,
  soCalled?,
  gloss?,
  term?,
  title?,
  code?,
  ident?
model.emphLike_sequenceOptionalRepeatable =
  foreign*,
  emph*,
  distinct*,
  mentioned*,
  soCalled*,
  gloss*,
  term*,
  title*,
  code*,
  ident*
model.emphLike_sequenceRepeatable =
  foreign+,
  emph+,
  distinct+,
  mentioned+,
  soCalled+,
  gloss+,
  term+,
  title+,
  code+,
  ident+
model.highlighted = model.hiLike | model.emphLike
model.highlighted_alternation =
  model.hiLike_alternation | model.emphLike_alternation
model.highlighted_sequence =
  model.hiLike_sequence, model.emphLike_sequence
model.highlighted_sequenceOptional =
  model.hiLike_sequenceOptional?, model.emphLike_sequenceOptional?
model.highlighted_sequenceOptionalRepeatable =
  model.hiLike_sequenceOptionalRepeatable*,
  model.emphLike_sequenceOptionalRepeatable*
model.highlighted_sequenceRepeatable =
  model.hiLike_sequenceRepeatable+, model.emphLike_sequenceRepeatable+
model.dateLike = date | time
model.dateLike_alternation = date | time
model.dateLike_sequence = date, time
model.dateLike_sequenceOptional = date?, time?
model.dateLike_sequenceOptionalRepeatable = date*, time*
model.dateLike_sequenceRepeatable = date+, time+
model.dimLike = height | depth | width
model.dimLike_alternation = height | depth | width
model.dimLike_sequence = height, depth, width
model.dimLike_sequenceOptional = height?, depth?, width?
model.dimLike_sequenceOptionalRepeatable = height*, depth*, width*
model.dimLike_sequenceRepeatable = height+, depth+, width+
model.measureLike =
  num | measure | measureGrp | dim | height | depth | width | geo
model.measureLike_alternation =
  num | measure | measureGrp | dim | height | depth | width | geo
model.measureLike_sequence =
  num, measure, measureGrp, dim, height, depth, width, geo
model.measureLike_sequenceOptional =
  num?, measure?, measureGrp?, dim?, height?, depth?, width?, geo?
model.measureLike_sequenceOptionalRepeatable =
  num*, measure*, measureGrp*, dim*, height*, depth*, width*, geo*
model.measureLike_sequenceRepeatable =
  num+, measure+, measureGrp+, dim+, height+, depth+, width+, geo+
model.egLike = eg | egXML
model.egLike_alternation = eg | egXML
model.egLike_sequence = eg, egXML
model.egLike_sequenceOptional = eg?, egXML?
model.egLike_sequenceOptionalRepeatable = eg*, egXML*
model.egLike_sequenceRepeatable = eg+, egXML+
model.graphicLike = graphic | binaryObject | formula
model.graphicLike_alternation = graphic | binaryObject | formula
model.graphicLike_sequence = graphic, binaryObject, formula
model.graphicLike_sequenceOptional = graphic?, binaryObject?, formula?
model.graphicLike_sequenceOptionalRepeatable =
  graphic*, binaryObject*, formula*
model.graphicLike_sequenceRepeatable = graphic+, binaryObject+, formula+
model.offsetLike = offset | geogFeat
model.offsetLike_alternation = offset | geogFeat
model.offsetLike_sequence = offset, geogFeat
model.offsetLike_sequenceOptional = offset?, geogFeat?
model.offsetLike_sequenceOptionalRepeatable = offset*, geogFeat*
model.offsetLike_sequenceRepeatable = offset+, geogFeat+
model.pPart.msdesc =
  catchwords
  | dimensions
  | heraldry
  | locus
  | locusGrp
  | material
  | objectType
  | origDate
  | origPlace
  | secFol
  | signatures
  | stamp
  | watermark
model.pPart.msdesc_alternation =
  catchwords
  | dimensions
  | heraldry
  | locus
  | locusGrp
  | material
  | objectType
  | origDate
  | origPlace
  | secFol
  | signatures
  | stamp
  | watermark
model.pPart.msdesc_sequence =
  catchwords,
  dimensions,
  heraldry,
  locus,
  locusGrp,
  material,
  objectType,
  origDate,
  origPlace,
  secFol,
  signatures,
  stamp,
  watermark
model.pPart.msdesc_sequenceOptional =
  catchwords?,
  dimensions?,
  heraldry?,
  locus?,
  locusGrp?,
  material?,
  objectType?,
  origDate?,
  origPlace?,
  secFol?,
  signatures?,
  stamp?,
  watermark?
model.pPart.msdesc_sequenceOptionalRepeatable =
  catchwords*,
  dimensions*,
  heraldry*,
  locus*,
  locusGrp*,
  material*,
  objectType*,
  origDate*,
  origPlace*,
  secFol*,
  signatures*,
  stamp*,
  watermark*
model.pPart.msdesc_sequenceRepeatable =
  catchwords+,
  dimensions+,
  heraldry+,
  locus+,
  locusGrp+,
  material+,
  objectType+,
  origDate+,
  origPlace+,
  secFol+,
  signatures+,
  stamp+,
  watermark+
model.pPart.editorial = choice | abbr | expan | ex | am | subst
model.pPart.editorial_alternation =
  choice | abbr | expan | ex | am | subst
model.pPart.editorial_sequence = choice, abbr, expan, ex, am, subst
model.pPart.editorial_sequenceOptional =
  choice?, abbr?, expan?, ex?, am?, subst?
model.pPart.editorial_sequenceOptionalRepeatable =
  choice*, abbr*, expan*, ex*, am*, subst*
model.pPart.editorial_sequenceRepeatable =
  choice+, abbr+, expan+, ex+, am+, subst+
model.pPart.transcriptional =
  sic
  | corr
  | reg
  | orig
  | add
  | del
  | unclear
  | damage
  | handShift
  | restore
  | supplied
  | surplus
  | mod
  | redo
  | retrace
  | undo
  | app
model.pPart.transcriptional_alternation =
  sic
  | corr
  | reg
  | orig
  | add
  | del
  | unclear
  | damage
  | handShift
  | restore
  | supplied
  | surplus
  | mod
  | redo
  | retrace
  | undo
  | app
model.pPart.transcriptional_sequence =
  sic,
  corr,
  reg,
  orig,
  add,
  del,
  unclear,
  damage,
  handShift,
  restore,
  supplied,
  surplus,
  mod,
  redo,
  retrace,
  undo,
  app
model.pPart.transcriptional_sequenceOptional =
  sic?,
  corr?,
  reg?,
  orig?,
  add?,
  del?,
  unclear?,
  damage?,
  handShift?,
  restore?,
  supplied?,
  surplus?,
  mod?,
  redo?,
  retrace?,
  undo?,
  app?
model.pPart.transcriptional_sequenceOptionalRepeatable =
  sic*,
  corr*,
  reg*,
  orig*,
  add*,
  del*,
  unclear*,
  damage*,
  handShift*,
  restore*,
  supplied*,
  surplus*,
  mod*,
  redo*,
  retrace*,
  undo*,
  app*
model.pPart.transcriptional_sequenceRepeatable =
  sic+,
  corr+,
  reg+,
  orig+,
  add+,
  del+,
  unclear+,
  damage+,
  handShift+,
  restore+,
  supplied+,
  surplus+,
  mod+,
  redo+,
  retrace+,
  undo+,
  app+
model.pPart.edit = model.pPart.editorial | model.pPart.transcriptional
model.pPart.edit_alternation =
  model.pPart.editorial_alternation
  | model.pPart.transcriptional_alternation
model.pPart.edit_sequence =
  model.pPart.editorial_sequence, model.pPart.transcriptional_sequence
model.pPart.edit_sequenceOptional =
  model.pPart.editorial_sequenceOptional?,
  model.pPart.transcriptional_sequenceOptional?
model.pPart.edit_sequenceOptionalRepeatable =
  model.pPart.editorial_sequenceOptionalRepeatable*,
  model.pPart.transcriptional_sequenceOptionalRepeatable*
model.pPart.edit_sequenceRepeatable =
  model.pPart.editorial_sequenceRepeatable+,
  model.pPart.transcriptional_sequenceRepeatable+
model.linePart =
  model.segLike
  | model.hiLike
  | model.pPart.transcriptional
  | choice
  | zone
  | line
model.linePart_alternation =
  model.segLike_alternation
  | model.hiLike_alternation
  | model.pPart.transcriptional_alternation
  | choice
  | zone
  | line
model.linePart_sequence =
  model.segLike_sequence,
  model.hiLike_sequence,
  model.pPart.transcriptional_sequence,
  choice,
  zone,
  line
model.linePart_sequenceOptional =
  model.segLike_sequenceOptional?,
  model.hiLike_sequenceOptional?,
  model.pPart.transcriptional_sequenceOptional?,
  choice?,
  zone?,
  line?
model.linePart_sequenceOptionalRepeatable =
  model.segLike_sequenceOptionalRepeatable*,
  model.hiLike_sequenceOptionalRepeatable*,
  model.pPart.transcriptional_sequenceOptionalRepeatable*,
  choice*,
  zone*,
  line*
model.linePart_sequenceRepeatable =
  model.segLike_sequenceRepeatable+,
  model.hiLike_sequenceRepeatable+,
  model.pPart.transcriptional_sequenceRepeatable+,
  choice+,
  zone+,
  line+
model.ptrLike = ptr | ref
model.ptrLike_alternation = ptr | ref
model.ptrLike_sequence = ptr, ref
model.ptrLike_sequenceOptional = ptr?, ref?
model.ptrLike_sequenceOptionalRepeatable = ptr*, ref*
model.ptrLike_sequenceRepeatable = ptr+, ref+
model.lPart = caesura | rhyme
model.lPart_alternation = caesura | rhyme
model.lPart_sequence = caesura, rhyme
model.lPart_sequenceOptional = caesura?, rhyme?
model.lPart_sequenceOptionalRepeatable = caesura*, rhyme*
model.lPart_sequenceRepeatable = caesura+, rhyme+
model.global.meta =
  index
  | substJoin
  | listTranspose
  | link
  | linkGrp
  | timeline
  | join
  | joinGrp
  | alt
  | altGrp
  | span
  | spanGrp
  | interp
  | interpGrp
  | fs
  | fLib
  | fvLib
  | precision
  | certainty
  | respons
model.global.meta_alternation =
  index
  | substJoin
  | listTranspose
  | link
  | linkGrp
  | timeline
  | join
  | joinGrp
  | alt
  | altGrp
  | span
  | spanGrp
  | interp
  | interpGrp
  | fs
  | fLib
  | fvLib
  | precision
  | certainty
  | respons
model.global.meta_sequence =
  index,
  substJoin,
  listTranspose,
  link,
  linkGrp,
  timeline,
  join,
  joinGrp,
  alt,
  altGrp,
  span,
  spanGrp,
  interp,
  interpGrp,
  fs,
  fLib,
  fvLib,
  precision,
  certainty,
  respons
model.global.meta_sequenceOptional =
  index?,
  substJoin?,
  listTranspose?,
  link?,
  linkGrp?,
  timeline?,
  join?,
  joinGrp?,
  alt?,
  altGrp?,
  span?,
  spanGrp?,
  interp?,
  interpGrp?,
  fs?,
  fLib?,
  fvLib?,
  precision?,
  certainty?,
  respons?
model.global.meta_sequenceOptionalRepeatable =
  index*,
  substJoin*,
  listTranspose*,
  link*,
  linkGrp*,
  timeline*,
  join*,
  joinGrp*,
  alt*,
  altGrp*,
  span*,
  spanGrp*,
  interp*,
  interpGrp*,
  fs*,
  fLib*,
  fvLib*,
  precision*,
  certainty*,
  respons*
model.global.meta_sequenceRepeatable =
  index+,
  substJoin+,
  listTranspose+,
  link+,
  linkGrp+,
  timeline+,
  join+,
  joinGrp+,
  alt+,
  altGrp+,
  span+,
  spanGrp+,
  interp+,
  interpGrp+,
  fs+,
  fLib+,
  fvLib+,
  precision+,
  certainty+,
  respons+
model.milestoneLike = milestone | gb | pb | lb | cb | fw | anchor
model.milestoneLike_alternation =
  milestone | gb | pb | lb | cb | fw | anchor
model.milestoneLike_sequence = milestone, gb, pb, lb, cb, fw, anchor
model.milestoneLike_sequenceOptional =
  milestone?, gb?, pb?, lb?, cb?, fw?, anchor?
model.milestoneLike_sequenceOptionalRepeatable =
  milestone*, gb*, pb*, lb*, cb*, fw*, anchor*
model.milestoneLike_sequenceRepeatable =
  milestone+, gb+, pb+, lb+, cb+, fw+, anchor+
model.gLike = g
model.gLike_alternation = g
model.gLike_sequence = g
model.gLike_sequenceOptional = g?
model.gLike_sequenceOptionalRepeatable = g*
model.gLike_sequenceRepeatable = g+
model.oddDecl =
  moduleSpec
  | specGrp
  | specGrpRef
  | elementSpec
  | classSpec
  | macroSpec
  | listRef
model.oddDecl_alternation =
  moduleSpec
  | specGrp
  | specGrpRef
  | elementSpec
  | classSpec
  | macroSpec
  | listRef
model.oddDecl_sequence =
  moduleSpec,
  specGrp,
  specGrpRef,
  elementSpec,
  classSpec,
  macroSpec,
  listRef
model.oddDecl_sequenceOptional =
  moduleSpec?,
  specGrp?,
  specGrpRef?,
  elementSpec?,
  classSpec?,
  macroSpec?,
  listRef?
model.oddDecl_sequenceOptionalRepeatable =
  moduleSpec*,
  specGrp*,
  specGrpRef*,
  elementSpec*,
  classSpec*,
  macroSpec*,
  listRef*
model.oddDecl_sequenceRepeatable =
  moduleSpec+,
  specGrp+,
  specGrpRef+,
  elementSpec+,
  classSpec+,
  macroSpec+,
  listRef+
model.oddRef = classRef | elementRef | macroRef | moduleRef
model.oddRef_alternation = classRef | elementRef | macroRef | moduleRef
model.oddRef_sequence = classRef, elementRef, macroRef, moduleRef
model.oddRef_sequenceOptional =
  classRef?, elementRef?, macroRef?, moduleRef?
model.oddRef_sequenceOptionalRepeatable =
  classRef*, elementRef*, macroRef*, moduleRef*
model.oddRef_sequenceRepeatable =
  classRef+, elementRef+, macroRef+, moduleRef+
model.phrase.xml = att | gi | tag | val
model.phrase.xml_alternation = att | gi | tag | val
model.phrase.xml_sequence = att, gi, tag, val
model.phrase.xml_sequenceOptional = att?, gi?, tag?, val?
model.phrase.xml_sequenceOptionalRepeatable = att*, gi*, tag*, val*
model.phrase.xml_sequenceRepeatable = att+, gi+, tag+, val+
model.specDescLike = specList | specDesc
model.specDescLike_alternation = specList | specDesc
model.specDescLike_sequence = specList, specDesc
model.specDescLike_sequenceOptional = specList?, specDesc?
model.specDescLike_sequenceOptionalRepeatable = specList*, specDesc*
model.specDescLike_sequenceRepeatable = specList+, specDesc+
model.biblLike =
  biblFull | bibl | biblStruct | msDesc | listRelation | relationGrp
model.biblLike_alternation =
  biblFull | bibl | biblStruct | msDesc | listRelation | relationGrp
model.biblLike_sequence =
  biblFull, bibl, biblStruct, msDesc, listRelation, relationGrp
model.biblLike_sequenceOptional =
  biblFull?, bibl?, biblStruct?, msDesc?, listRelation?, relationGrp?
model.biblLike_sequenceOptionalRepeatable =
  biblFull*, bibl*, biblStruct*, msDesc*, listRelation*, relationGrp*
model.biblLike_sequenceRepeatable =
  biblFull+, bibl+, biblStruct+, msDesc+, listRelation+, relationGrp+
model.headLike = head
model.headLike_alternation = head
model.headLike_sequence = head
model.headLike_sequenceOptional = head?
model.headLike_sequenceOptionalRepeatable = head*
model.headLike_sequenceRepeatable = head+
model.labelLike = desc | label
model.labelLike_alternation = desc | label
model.labelLike_sequence = desc, label
model.labelLike_sequenceOptional = desc?, label?
model.labelLike_sequenceOptionalRepeatable = desc*, label*
model.labelLike_sequenceRepeatable = desc+, label+
model.listLike =
  \list
  | listBibl
  | listWit
  | listOrg
  | listEvent
  | listPerson
  | listPlace
  | listNym
  | table
model.listLike_alternation =
  \list
  | listBibl
  | listWit
  | listOrg
  | listEvent
  | listPerson
  | listPlace
  | listNym
  | table
model.listLike_sequence =
  \list,
  listBibl,
  listWit,
  listOrg,
  listEvent,
  listPerson,
  listPlace,
  listNym,
  table
model.listLike_sequenceOptional =
  \list?,
  listBibl?,
  listWit?,
  listOrg?,
  listEvent?,
  listPerson?,
  listPlace?,
  listNym?,
  table?
model.listLike_sequenceOptionalRepeatable =
  \list*,
  listBibl*,
  listWit*,
  listOrg*,
  listEvent*,
  listPerson*,
  listPlace*,
  listNym*,
  table*
model.listLike_sequenceRepeatable =
  \list+,
  listBibl+,
  listWit+,
  listOrg+,
  listEvent+,
  listPerson+,
  listPlace+,
  listNym+,
  table+
model.noteLike = note | witDetail
model.noteLike_alternation = note | witDetail
model.noteLike_sequence = note, witDetail
model.noteLike_sequenceOptional = note?, witDetail?
model.noteLike_sequenceOptionalRepeatable = note*, witDetail*
model.noteLike_sequenceRepeatable = note+, witDetail+
model.lLike = l
model.lLike_alternation = l
model.lLike_sequence = l
model.lLike_sequenceOptional = l?
model.lLike_sequenceOptionalRepeatable = l*
model.lLike_sequenceRepeatable = l+
model.pLike = p | ab
model.pLike_alternation = p | ab
model.pLike_sequence = p, ab
model.pLike_sequenceOptional = p?, ab?
model.pLike_sequenceOptionalRepeatable = p*, ab*
model.pLike_sequenceRepeatable = p+, ab+
model.stageLike = stage | move | view | camera | sound | caption | tech
model.stageLike_alternation =
  stage | move | view | camera | sound | caption | tech
model.stageLike_sequence =
  stage, move, view, camera, sound, caption, tech
model.stageLike_sequenceOptional =
  stage?, move?, view?, camera?, sound?, caption?, tech?
model.stageLike_sequenceOptionalRepeatable =
  stage*, move*, view*, camera*, sound*, caption*, tech*
model.stageLike_sequenceRepeatable =
  stage+, move+, view+, camera+, sound+, caption+, tech+
model.featureVal.complex = fs | vColl | vNot | vMerge
model.featureVal.complex_alternation = fs | vColl | vNot | vMerge
model.featureVal.complex_sequence = fs, vColl, vNot, vMerge
model.featureVal.complex_sequenceOptional = fs?, vColl?, vNot?, vMerge?
model.featureVal.complex_sequenceOptionalRepeatable =
  fs*, vColl*, vNot*, vMerge*
model.featureVal.complex_sequenceRepeatable =
  fs+, vColl+, vNot+, vMerge+
model.featureVal.single =
  binary | symbol | numeric | \string | vLabel | \default | vAlt
model.featureVal.single_alternation =
  binary | symbol | numeric | \string | vLabel | \default | vAlt
model.featureVal.single_sequence =
  binary, symbol, numeric, \string, vLabel, \default, vAlt
model.featureVal.single_sequenceOptional =
  binary?, symbol?, numeric?, \string?, vLabel?, \default?, vAlt?
model.featureVal.single_sequenceOptionalRepeatable =
  binary*, symbol*, numeric*, \string*, vLabel*, \default*, vAlt*
model.featureVal.single_sequenceRepeatable =
  binary+, symbol+, numeric+, \string+, vLabel+, \default+, vAlt+
model.entryPart =
  superEntry
  | hom
  | sense
  | form
  | orth
  | pron
  | hyph
  | syll
  | gen
  | number
  | case
  | per
  | tns
  | mood
  | iType
  | gramGrp
  | pos
  | subc
  | colloc
  | def
  | etym
  | usg
  | lbl
  | xr
  | re
model.entryPart_alternation =
  superEntry
  | hom
  | sense
  | form
  | orth
  | pron
  | hyph
  | syll
  | gen
  | number
  | case
  | per
  | tns
  | mood
  | iType
  | gramGrp
  | pos
  | subc
  | colloc
  | def
  | etym
  | usg
  | lbl
  | xr
  | re
model.entryPart_sequence =
  superEntry,
  hom,
  sense,
  form,
  orth,
  pron,
  hyph,
  syll,
  gen,
  number,
  case,
  per,
  tns,
  mood,
  iType,
  gramGrp,
  pos,
  subc,
  colloc,
  def,
  etym,
  usg,
  lbl,
  xr,
  re
model.entryPart_sequenceOptional =
  superEntry?,
  hom?,
  sense?,
  form?,
  orth?,
  pron?,
  hyph?,
  syll?,
  gen?,
  number?,
  case?,
  per?,
  tns?,
  mood?,
  iType?,
  gramGrp?,
  pos?,
  subc?,
  colloc?,
  def?,
  etym?,
  usg?,
  lbl?,
  xr?,
  re?
model.entryPart_sequenceOptionalRepeatable =
  superEntry*,
  hom*,
  sense*,
  form*,
  orth*,
  pron*,
  hyph*,
  syll*,
  gen*,
  number*,
  case*,
  per*,
  tns*,
  mood*,
  iType*,
  gramGrp*,
  pos*,
  subc*,
  colloc*,
  def*,
  etym*,
  usg*,
  lbl*,
  xr*,
  re*
model.entryPart_sequenceRepeatable =
  superEntry+,
  hom+,
  sense+,
  form+,
  orth+,
  pron+,
  hyph+,
  syll+,
  gen+,
  number+,
  case+,
  per+,
  tns+,
  mood+,
  iType+,
  gramGrp+,
  pos+,
  subc+,
  colloc+,
  def+,
  etym+,
  usg+,
  lbl+,
  xr+,
  re+
model.entryPart.top =
  cit | dictScrap | form | gramGrp | def | etym | usg | xr | re
model.entryPart.top_alternation =
  cit | dictScrap | form | gramGrp | def | etym | usg | xr | re
model.entryPart.top_sequence =
  cit, dictScrap, form, gramGrp, def, etym, usg, xr, re
model.entryPart.top_sequenceOptional =
  cit?, dictScrap?, form?, gramGrp?, def?, etym?, usg?, xr?, re?
model.entryPart.top_sequenceOptionalRepeatable =
  cit*, dictScrap*, form*, gramGrp*, def*, etym*, usg*, xr*, re*
model.entryPart.top_sequenceRepeatable =
  cit+, dictScrap+, form+, gramGrp+, def+, etym+, usg+, xr+, re+
model.global.edit = gap | addSpan | damageSpan | delSpan | space
model.global.edit_alternation =
  gap | addSpan | damageSpan | delSpan | space
model.global.edit_sequence = gap, addSpan, damageSpan, delSpan, space
model.global.edit_sequenceOptional =
  gap?, addSpan?, damageSpan?, delSpan?, space?
model.global.edit_sequenceOptionalRepeatable =
  gap*, addSpan*, damageSpan*, delSpan*, space*
model.global.edit_sequenceRepeatable =
  gap+, addSpan+, damageSpan+, delSpan+, space+
model.divPart =
  model.lLike
  | model.pLike
  | lg
  | sp
  | spGrp
  | model.divPart.spoken
  | graph
  | tree
  | eTree
  | forest
  | listForest
  | schemaSpec
model.divPart_alternation =
  model.lLike_alternation
  | model.pLike_alternation
  | lg
  | sp
  | spGrp
  | model.divPart.spoken_alternation
  | graph
  | tree
  | eTree
  | forest
  | listForest
  | schemaSpec
model.divPart_sequence =
  model.lLike_sequence,
  model.pLike_sequence,
  lg,
  sp,
  spGrp,
  model.divPart.spoken_sequence,
  graph,
  tree,
  eTree,
  forest,
  listForest,
  schemaSpec
model.divPart_sequenceOptional =
  model.lLike_sequenceOptional?,
  model.pLike_sequenceOptional?,
  lg?,
  sp?,
  spGrp?,
  model.divPart.spoken_sequenceOptional?,
  graph?,
  tree?,
  eTree?,
  forest?,
  listForest?,
  schemaSpec?
model.divPart_sequenceOptionalRepeatable =
  model.lLike_sequenceOptionalRepeatable*,
  model.pLike_sequenceOptionalRepeatable*,
  lg*,
  sp*,
  spGrp*,
  model.divPart.spoken_sequenceOptionalRepeatable*,
  graph*,
  tree*,
  eTree*,
  forest*,
  listForest*,
  schemaSpec*
model.divPart_sequenceRepeatable =
  model.lLike_sequenceRepeatable+,
  model.pLike_sequenceRepeatable+,
  lg+,
  sp+,
  spGrp+,
  model.divPart.spoken_sequenceRepeatable+,
  graph+,
  tree+,
  eTree+,
  forest+,
  listForest+,
  schemaSpec+
model.persStateLike =
  persName
  | affiliation
  | age
  | education
  | faith
  | floruit
  | langKnowledge
  | nationality
  | occupation
  | residence
  | sex
  | socecStatus
  | state
  | trait
model.persStateLike_alternation =
  persName
  | affiliation
  | age
  | education
  | faith
  | floruit
  | langKnowledge
  | nationality
  | occupation
  | residence
  | sex
  | socecStatus
  | state
  | trait
model.persStateLike_sequence =
  persName,
  affiliation,
  age,
  education,
  faith,
  floruit,
  langKnowledge,
  nationality,
  occupation,
  residence,
  sex,
  socecStatus,
  state,
  trait
model.persStateLike_sequenceOptional =
  persName?,
  affiliation?,
  age?,
  education?,
  faith?,
  floruit?,
  langKnowledge?,
  nationality?,
  occupation?,
  residence?,
  sex?,
  socecStatus?,
  state?,
  trait?
model.persStateLike_sequenceOptionalRepeatable =
  persName*,
  affiliation*,
  age*,
  education*,
  faith*,
  floruit*,
  langKnowledge*,
  nationality*,
  occupation*,
  residence*,
  sex*,
  socecStatus*,
  state*,
  trait*
model.persStateLike_sequenceRepeatable =
  persName+,
  affiliation+,
  age+,
  education+,
  faith+,
  floruit+,
  langKnowledge+,
  nationality+,
  occupation+,
  residence+,
  sex+,
  socecStatus+,
  state+,
  trait+
model.persEventLike = birth | death | event
model.persEventLike_alternation = birth | death | event
model.persEventLike_sequence = birth, death, event
model.persEventLike_sequenceOptional = birth?, death?, event?
model.persEventLike_sequenceOptionalRepeatable = birth*, death*, event*
model.persEventLike_sequenceRepeatable = birth+, death+, event+
model.personLike = org | person | personGrp
model.personLike_alternation = org | person | personGrp
model.personLike_sequence = org, person, personGrp
model.personLike_sequenceOptional = org?, person?, personGrp?
model.personLike_sequenceOptionalRepeatable = org*, person*, personGrp*
model.personLike_sequenceRepeatable = org+, person+, personGrp+
model.personPart = model.persStateLike | model.persEventLike | bibl
model.personPart_alternation =
  model.persStateLike_alternation
  | model.persEventLike_alternation
  | bibl
model.personPart_sequence =
  model.persStateLike_sequence, model.persEventLike_sequence, bibl
model.personPart_sequenceOptional =
  model.persStateLike_sequenceOptional?,
  model.persEventLike_sequenceOptional?,
  bibl?
model.personPart_sequenceOptionalRepeatable =
  model.persStateLike_sequenceOptionalRepeatable*,
  model.persEventLike_sequenceOptionalRepeatable*,
  bibl*
model.personPart_sequenceRepeatable =
  model.persStateLike_sequenceRepeatable+,
  model.persEventLike_sequenceRepeatable+,
  bibl+
model.placeNamePart =
  placeName | bloc | country | region | district | settlement | geogName
model.placeNamePart_alternation =
  placeName | bloc | country | region | district | settlement | geogName
model.placeNamePart_sequence =
  placeName, bloc, country, region, district, settlement, geogName
model.placeNamePart_sequenceOptional =
  placeName?,
  bloc?,
  country?,
  region?,
  district?,
  settlement?,
  geogName?
model.placeNamePart_sequenceOptionalRepeatable =
  placeName*,
  bloc*,
  country*,
  region*,
  district*,
  settlement*,
  geogName*
model.placeNamePart_sequenceRepeatable =
  placeName+,
  bloc+,
  country+,
  region+,
  district+,
  settlement+,
  geogName+
model.placeStateLike =
  model.placeNamePart
  | climate
  | location
  | population
  | state
  | terrain
  | trait
model.placeStateLike_alternation =
  model.placeNamePart_alternation
  | climate
  | location
  | population
  | state
  | terrain
  | trait
model.placeStateLike_sequence =
  model.placeNamePart_sequence,
  climate,
  location,
  population,
  state,
  terrain,
  trait
model.placeStateLike_sequenceOptional =
  model.placeNamePart_sequenceOptional?,
  climate?,
  location?,
  population?,
  state?,
  terrain?,
  trait?
model.placeStateLike_sequenceOptionalRepeatable =
  model.placeNamePart_sequenceOptionalRepeatable*,
  climate*,
  location*,
  population*,
  state*,
  terrain*,
  trait*
model.placeStateLike_sequenceRepeatable =
  model.placeNamePart_sequenceRepeatable+,
  climate+,
  location+,
  population+,
  state+,
  terrain+,
  trait+
model.placeEventLike = event
model.placeEventLike_alternation = event
model.placeEventLike_sequence = event
model.placeEventLike_sequenceOptional = event?
model.placeEventLike_sequenceOptionalRepeatable = event*
model.placeEventLike_sequenceRepeatable = event+
model.orgPart = listOrg | listPerson | listPlace
model.orgPart_alternation = listOrg | listPerson | listPlace
model.orgPart_sequence = listOrg, listPerson, listPlace
model.orgPart_sequenceOptional = listOrg?, listPerson?, listPlace?
model.orgPart_sequenceOptionalRepeatable =
  listOrg*, listPerson*, listPlace*
model.orgPart_sequenceRepeatable = listOrg+, listPerson+, listPlace+
model.publicationStmtPart =
  distributor
  | authority
  | idno
  | availability
  | address
  | date
  | publisher
  | pubPlace
model.publicationStmtPart_alternation =
  distributor
  | authority
  | idno
  | availability
  | address
  | date
  | publisher
  | pubPlace
model.publicationStmtPart_sequence =
  distributor,
  authority,
  idno,
  availability,
  address,
  date,
  publisher,
  pubPlace
model.publicationStmtPart_sequenceOptional =
  distributor?,
  authority?,
  idno?,
  availability?,
  address?,
  date?,
  publisher?,
  pubPlace?
model.publicationStmtPart_sequenceOptionalRepeatable =
  distributor*,
  authority*,
  idno*,
  availability*,
  address*,
  date*,
  publisher*,
  pubPlace*
model.publicationStmtPart_sequenceRepeatable =
  distributor+,
  authority+,
  idno+,
  availability+,
  address+,
  date+,
  publisher+,
  pubPlace+
model.availabilityPart = licence
model.availabilityPart_alternation = licence
model.availabilityPart_sequence = licence
model.availabilityPart_sequenceOptional = licence?
model.availabilityPart_sequenceOptionalRepeatable = licence*
model.availabilityPart_sequenceRepeatable = licence+
model.certLike = certainty | respons
model.certLike_alternation = certainty | respons
model.certLike_sequence = certainty, respons
model.certLike_sequenceOptional = certainty?, respons?
model.certLike_sequenceOptionalRepeatable = certainty*, respons*
model.certLike_sequenceRepeatable = certainty+, respons+
model.glossLike =
  model.certLike | desc | gloss | precision | equiv | altIdent
model.glossLike_alternation =
  model.certLike_alternation
  | desc
  | gloss
  | precision
  | equiv
  | altIdent
model.glossLike_sequence =
  model.certLike_sequence, desc, gloss, precision, equiv, altIdent
model.glossLike_sequenceOptional =
  model.certLike_sequenceOptional?,
  desc?,
  gloss?,
  precision?,
  equiv?,
  altIdent?
model.glossLike_sequenceOptionalRepeatable =
  model.certLike_sequenceOptionalRepeatable*,
  desc*,
  gloss*,
  precision*,
  equiv*,
  altIdent*
model.glossLike_sequenceRepeatable =
  model.certLike_sequenceRepeatable+,
  desc+,
  gloss+,
  precision+,
  equiv+,
  altIdent+
model.quoteLike = quote | cit
model.quoteLike_alternation = quote | cit
model.quoteLike_sequence = quote, cit
model.quoteLike_sequenceOptional = quote?, cit?
model.quoteLike_sequenceOptionalRepeatable = quote*, cit*
model.quoteLike_sequenceRepeatable = quote+, cit+
model.qLike = model.quoteLike | said | q | floatingText
model.qLike_alternation =
  model.quoteLike_alternation | said | q | floatingText
model.qLike_sequence = model.quoteLike_sequence, said, q, floatingText
model.qLike_sequenceOptional =
  model.quoteLike_sequenceOptional?, said?, q?, floatingText?
model.qLike_sequenceOptionalRepeatable =
  model.quoteLike_sequenceOptionalRepeatable*, said*, q*, floatingText*
model.qLike_sequenceRepeatable =
  model.quoteLike_sequenceRepeatable+, said+, q+, floatingText+
model.respLike =
  sponsor | funder | principal | author | editor | respStmt | meeting
model.respLike_alternation =
  sponsor | funder | principal | author | editor | respStmt | meeting
model.respLike_sequence =
  sponsor, funder, principal, author, editor, respStmt, meeting
model.respLike_sequenceOptional =
  sponsor?, funder?, principal?, author?, editor?, respStmt?, meeting?
model.respLike_sequenceOptionalRepeatable =
  sponsor*, funder*, principal*, author*, editor*, respStmt*, meeting*
model.respLike_sequenceRepeatable =
  sponsor+, funder+, principal+, author+, editor+, respStmt+, meeting+
model.divWrapper =
  meeting
  | byline
  | dateline
  | argument
  | epigraph
  | salute
  | docAuthor
  | docDate
model.divWrapper_alternation =
  meeting
  | byline
  | dateline
  | argument
  | epigraph
  | salute
  | docAuthor
  | docDate
model.divWrapper_sequence =
  meeting,
  byline,
  dateline,
  argument,
  epigraph,
  salute,
  docAuthor,
  docDate
model.divWrapper_sequenceOptional =
  meeting?,
  byline?,
  dateline?,
  argument?,
  epigraph?,
  salute?,
  docAuthor?,
  docDate?
model.divWrapper_sequenceOptionalRepeatable =
  meeting*,
  byline*,
  dateline*,
  argument*,
  epigraph*,
  salute*,
  docAuthor*,
  docDate*
model.divWrapper_sequenceRepeatable =
  meeting+,
  byline+,
  dateline+,
  argument+,
  epigraph+,
  salute+,
  docAuthor+,
  docDate+
model.divTopPart = model.headLike | opener
model.divTopPart_alternation = model.headLike_alternation | opener
model.divTopPart_sequence = model.headLike_sequence, opener
model.divTopPart_sequenceOptional =
  model.headLike_sequenceOptional?, opener?
model.divTopPart_sequenceOptionalRepeatable =
  model.headLike_sequenceOptionalRepeatable*, opener*
model.divTopPart_sequenceRepeatable =
  model.headLike_sequenceRepeatable+, opener+
model.divTop = model.divWrapper | model.divTopPart
model.divTop_alternation =
  model.divWrapper_alternation | model.divTopPart_alternation
model.divTop_sequence =
  model.divWrapper_sequence, model.divTopPart_sequence
model.divTop_sequenceOptional =
  model.divWrapper_sequenceOptional?, model.divTopPart_sequenceOptional?
model.divTop_sequenceOptionalRepeatable =
  model.divWrapper_sequenceOptionalRepeatable*,
  model.divTopPart_sequenceOptionalRepeatable*
model.divTop_sequenceRepeatable =
  model.divWrapper_sequenceRepeatable+,
  model.divTopPart_sequenceRepeatable+
model.frontPart.drama =
  set | prologue | epilogue | performance | castList
model.frontPart.drama_alternation =
  set | prologue | epilogue | performance | castList
model.frontPart.drama_sequence =
  set, prologue, epilogue, performance, castList
model.frontPart.drama_sequenceOptional =
  set?, prologue?, epilogue?, performance?, castList?
model.frontPart.drama_sequenceOptionalRepeatable =
  set*, prologue*, epilogue*, performance*, castList*
model.frontPart.drama_sequenceRepeatable =
  set+, prologue+, epilogue+, performance+, castList+
model.pLike.front =
  head
  | byline
  | argument
  | epigraph
  | docTitle
  | titlePart
  | docAuthor
  | docEdition
  | docImprint
  | docDate
model.pLike.front_alternation =
  head
  | byline
  | argument
  | epigraph
  | docTitle
  | titlePart
  | docAuthor
  | docEdition
  | docImprint
  | docDate
model.pLike.front_sequence =
  head,
  byline,
  argument,
  epigraph,
  docTitle,
  titlePart,
  docAuthor,
  docEdition,
  docImprint,
  docDate
model.pLike.front_sequenceOptional =
  head?,
  byline?,
  argument?,
  epigraph?,
  docTitle?,
  titlePart?,
  docAuthor?,
  docEdition?,
  docImprint?,
  docDate?
model.pLike.front_sequenceOptionalRepeatable =
  head*,
  byline*,
  argument*,
  epigraph*,
  docTitle*,
  titlePart*,
  docAuthor*,
  docEdition*,
  docImprint*,
  docDate*
model.pLike.front_sequenceRepeatable =
  head+,
  byline+,
  argument+,
  epigraph+,
  docTitle+,
  titlePart+,
  docAuthor+,
  docEdition+,
  docImprint+,
  docDate+
model.divBottomPart = trailer | closer | signed | postscript
model.divBottomPart_alternation = trailer | closer | signed | postscript
model.divBottomPart_sequence = trailer, closer, signed, postscript
model.divBottomPart_sequenceOptional =
  trailer?, closer?, signed?, postscript?
model.divBottomPart_sequenceOptionalRepeatable =
  trailer*, closer*, signed*, postscript*
model.divBottomPart_sequenceRepeatable =
  trailer+, closer+, signed+, postscript+
model.divBottom = model.divWrapper | model.divBottomPart
model.divBottom_alternation =
  model.divWrapper_alternation | model.divBottomPart_alternation
model.divBottom_sequence =
  model.divWrapper_sequence, model.divBottomPart_sequence
model.divBottom_sequenceOptional =
  model.divWrapper_sequenceOptional?,
  model.divBottomPart_sequenceOptional?
model.divBottom_sequenceOptionalRepeatable =
  model.divWrapper_sequenceOptionalRepeatable*,
  model.divBottomPart_sequenceOptionalRepeatable*
model.divBottom_sequenceRepeatable =
  model.divWrapper_sequenceRepeatable+,
  model.divBottomPart_sequenceRepeatable+
model.titlepagePart =
  graphic
  | binaryObject
  | byline
  | argument
  | epigraph
  | docTitle
  | titlePart
  | docAuthor
  | imprimatur
  | docEdition
  | docImprint
  | docDate
model.titlepagePart_alternation =
  graphic
  | binaryObject
  | byline
  | argument
  | epigraph
  | docTitle
  | titlePart
  | docAuthor
  | imprimatur
  | docEdition
  | docImprint
  | docDate
model.titlepagePart_sequence =
  graphic,
  binaryObject,
  byline,
  argument,
  epigraph,
  docTitle,
  titlePart,
  docAuthor,
  imprimatur,
  docEdition,
  docImprint,
  docDate
model.titlepagePart_sequenceOptional =
  graphic?,
  binaryObject?,
  byline?,
  argument?,
  epigraph?,
  docTitle?,
  titlePart?,
  docAuthor?,
  imprimatur?,
  docEdition?,
  docImprint?,
  docDate?
model.titlepagePart_sequenceOptionalRepeatable =
  graphic*,
  binaryObject*,
  byline*,
  argument*,
  epigraph*,
  docTitle*,
  titlePart*,
  docAuthor*,
  imprimatur*,
  docEdition*,
  docImprint*,
  docDate*
model.titlepagePart_sequenceRepeatable =
  graphic+,
  binaryObject+,
  byline+,
  argument+,
  epigraph+,
  docTitle+,
  titlePart+,
  docAuthor+,
  imprimatur+,
  docEdition+,
  docImprint+,
  docDate+
model.msQuoteLike =
  title | colophon | explicit | finalRubric | incipit | rubric
model.msQuoteLike_alternation =
  title | colophon | explicit | finalRubric | incipit | rubric
model.msQuoteLike_sequence =
  title, colophon, explicit, finalRubric, incipit, rubric
model.msQuoteLike_sequenceOptional =
  title?, colophon?, explicit?, finalRubric?, incipit?, rubric?
model.msQuoteLike_sequenceOptionalRepeatable =
  title*, colophon*, explicit*, finalRubric*, incipit*, rubric*
model.msQuoteLike_sequenceRepeatable =
  title+, colophon+, explicit+, finalRubric+, incipit+, rubric+
model.msItemPart =
  model.quoteLike
  | model.respLike
  | model.msQuoteLike
  | bibl
  | listBibl
  | filiation
  | msItem
  | msItemStruct
  | textLang
  | decoNote
model.msItemPart_alternation =
  model.quoteLike_alternation
  | model.respLike_alternation
  | model.msQuoteLike_alternation
  | bibl
  | listBibl
  | filiation
  | msItem
  | msItemStruct
  | textLang
  | decoNote
model.msItemPart_sequence =
  model.quoteLike_sequence,
  model.respLike_sequence,
  model.msQuoteLike_sequence,
  bibl,
  listBibl,
  filiation,
  msItem,
  msItemStruct,
  textLang,
  decoNote
model.msItemPart_sequenceOptional =
  model.quoteLike_sequenceOptional?,
  model.respLike_sequenceOptional?,
  model.msQuoteLike_sequenceOptional?,
  bibl?,
  listBibl?,
  filiation?,
  msItem?,
  msItemStruct?,
  textLang?,
  decoNote?
model.msItemPart_sequenceOptionalRepeatable =
  model.quoteLike_sequenceOptionalRepeatable*,
  model.respLike_sequenceOptionalRepeatable*,
  model.msQuoteLike_sequenceOptionalRepeatable*,
  bibl*,
  listBibl*,
  filiation*,
  msItem*,
  msItemStruct*,
  textLang*,
  decoNote*
model.msItemPart_sequenceRepeatable =
  model.quoteLike_sequenceRepeatable+,
  model.respLike_sequenceRepeatable+,
  model.msQuoteLike_sequenceRepeatable+,
  bibl+,
  listBibl+,
  filiation+,
  msItem+,
  msItemStruct+,
  textLang+,
  decoNote+
model.choicePart =
  sic | corr | reg | orig | unclear | abbr | expan | ex | am | seg
model.choicePart_alternation =
  sic | corr | reg | orig | unclear | abbr | expan | ex | am | seg
model.choicePart_sequence =
  sic, corr, reg, orig, unclear, abbr, expan, ex, am, seg
model.choicePart_sequenceOptional =
  sic?, corr?, reg?, orig?, unclear?, abbr?, expan?, ex?, am?, seg?
model.choicePart_sequenceOptionalRepeatable =
  sic*, corr*, reg*, orig*, unclear*, abbr*, expan*, ex*, am*, seg*
model.choicePart_sequenceRepeatable =
  sic+, corr+, reg+, orig+, unclear+, abbr+, expan+, ex+, am+, seg+
model.imprintPart = distributor | publisher | biblScope | pubPlace
model.imprintPart_alternation =
  distributor | publisher | biblScope | pubPlace
model.imprintPart_sequence = distributor, publisher, biblScope, pubPlace
model.imprintPart_sequenceOptional =
  distributor?, publisher?, biblScope?, pubPlace?
model.imprintPart_sequenceOptionalRepeatable =
  distributor*, publisher*, biblScope*, pubPlace*
model.imprintPart_sequenceRepeatable =
  distributor+, publisher+, biblScope+, pubPlace+
model.catDescPart = textDesc
model.catDescPart_alternation = textDesc
model.catDescPart_sequence = textDesc
model.catDescPart_sequenceOptional = textDesc?
model.catDescPart_sequenceOptionalRepeatable = textDesc*
model.catDescPart_sequenceRepeatable = textDesc+
model.settingPart = locale | activity
model.settingPart_alternation = locale | activity
model.settingPart_sequence = locale, activity
model.settingPart_sequenceOptional = locale?, activity?
model.settingPart_sequenceOptionalRepeatable = locale*, activity*
model.settingPart_sequenceRepeatable = locale+, activity+
model.textDescPart =
  channel
  | constitution
  | derivation
  | domain
  | factuality
  | interaction
  | preparedness
model.textDescPart_alternation =
  channel
  | constitution
  | derivation
  | domain
  | factuality
  | interaction
  | preparedness
model.textDescPart_sequence =
  channel,
  constitution,
  derivation,
  domain,
  factuality,
  interaction,
  preparedness
model.textDescPart_sequenceOptional =
  channel?,
  constitution?,
  derivation?,
  domain?,
  factuality?,
  interaction?,
  preparedness?
model.textDescPart_sequenceOptionalRepeatable =
  channel*,
  constitution*,
  derivation*,
  domain*,
  factuality*,
  interaction*,
  preparedness*
model.textDescPart_sequenceRepeatable =
  channel+,
  constitution+,
  derivation+,
  domain+,
  factuality+,
  interaction+,
  preparedness+
model.castItemPart = role | roleDesc | actor
model.castItemPart_alternation = role | roleDesc | actor
model.castItemPart_sequence = role, roleDesc, actor
model.castItemPart_sequenceOptional = role?, roleDesc?, actor?
model.castItemPart_sequenceOptionalRepeatable = role*, roleDesc*, actor*
model.castItemPart_sequenceRepeatable = role+, roleDesc+, actor+
model.physDescPart =
  objectDesc
  | handDesc
  | typeDesc
  | scriptDesc
  | musicNotation
  | decoDesc
  | additions
  | bindingDesc
  | sealDesc
  | accMat
model.physDescPart_alternation =
  objectDesc
  | handDesc
  | typeDesc
  | scriptDesc
  | musicNotation
  | decoDesc
  | additions
  | bindingDesc
  | sealDesc
  | accMat
model.physDescPart_sequence =
  objectDesc,
  handDesc,
  typeDesc,
  scriptDesc,
  musicNotation,
  decoDesc,
  additions,
  bindingDesc,
  sealDesc,
  accMat
model.physDescPart_sequenceOptional =
  objectDesc?,
  handDesc?,
  typeDesc?,
  scriptDesc?,
  musicNotation?,
  decoDesc?,
  additions?,
  bindingDesc?,
  sealDesc?,
  accMat?
model.physDescPart_sequenceOptionalRepeatable =
  objectDesc*,
  handDesc*,
  typeDesc*,
  scriptDesc*,
  musicNotation*,
  decoDesc*,
  additions*,
  bindingDesc*,
  sealDesc*,
  accMat*
model.physDescPart_sequenceRepeatable =
  objectDesc+,
  handDesc+,
  typeDesc+,
  scriptDesc+,
  musicNotation+,
  decoDesc+,
  additions+,
  bindingDesc+,
  sealDesc+,
  accMat+
model.addressLike = email | address | affiliation
model.addressLike_alternation = email | address | affiliation
model.addressLike_sequence = email, address, affiliation
model.addressLike_sequenceOptional = email?, address?, affiliation?
model.addressLike_sequenceOptionalRepeatable =
  email*, address*, affiliation*
model.addressLike_sequenceRepeatable = email+, address+, affiliation+
model.nameLike =
  model.nameLike.agent
  | model.offsetLike
  | model.placeStateLike
  | model.persNamePart
  | idno
  | rs
  | lang
model.nameLike_alternation =
  model.nameLike.agent_alternation
  | model.offsetLike_alternation
  | model.placeStateLike_alternation
  | model.persNamePart_alternation
  | idno
  | rs
  | lang
model.nameLike_sequence =
  model.nameLike.agent_sequence,
  model.offsetLike_sequence,
  model.placeStateLike_sequence,
  model.persNamePart_sequence,
  idno,
  rs,
  lang
model.nameLike_sequenceOptional =
  model.nameLike.agent_sequenceOptional?,
  model.offsetLike_sequenceOptional?,
  model.placeStateLike_sequenceOptional?,
  model.persNamePart_sequenceOptional?,
  idno?,
  rs?,
  lang?
model.nameLike_sequenceOptionalRepeatable =
  model.nameLike.agent_sequenceOptionalRepeatable*,
  model.offsetLike_sequenceOptionalRepeatable*,
  model.placeStateLike_sequenceOptionalRepeatable*,
  model.persNamePart_sequenceOptionalRepeatable*,
  idno*,
  rs*,
  lang*
model.nameLike_sequenceRepeatable =
  model.nameLike.agent_sequenceRepeatable+,
  model.offsetLike_sequenceRepeatable+,
  model.placeStateLike_sequenceRepeatable+,
  model.persNamePart_sequenceRepeatable+,
  idno+,
  rs+,
  lang+
model.global =
  model.global.meta
  | model.milestoneLike
  | model.noteLike
  | model.global.edit
  | model.global.spoken
  | metamark
  | notatedMusic
  | figure
model.global_alternation =
  model.global.meta_alternation
  | model.milestoneLike_alternation
  | model.noteLike_alternation
  | model.global.edit_alternation
  | model.global.spoken_alternation
  | metamark
  | notatedMusic
  | figure
model.global_sequence =
  model.global.meta_sequence,
  model.milestoneLike_sequence,
  model.noteLike_sequence,
  model.global.edit_sequence,
  model.global.spoken_sequence,
  metamark,
  notatedMusic,
  figure
model.global_sequenceOptional =
  model.global.meta_sequenceOptional?,
  model.milestoneLike_sequenceOptional?,
  model.noteLike_sequenceOptional?,
  model.global.edit_sequenceOptional?,
  model.global.spoken_sequenceOptional?,
  metamark?,
  notatedMusic?,
  figure?
model.global_sequenceOptionalRepeatable =
  model.global.meta_sequenceOptionalRepeatable*,
  model.milestoneLike_sequenceOptionalRepeatable*,
  model.noteLike_sequenceOptionalRepeatable*,
  model.global.edit_sequenceOptionalRepeatable*,
  model.global.spoken_sequenceOptionalRepeatable*,
  metamark*,
  notatedMusic*,
  figure*
model.global_sequenceRepeatable =
  model.global.meta_sequenceRepeatable+,
  model.milestoneLike_sequenceRepeatable+,
  model.noteLike_sequenceRepeatable+,
  model.global.edit_sequenceRepeatable+,
  model.global.spoken_sequenceRepeatable+,
  metamark+,
  notatedMusic+,
  figure+
model.featureVal = model.featureVal.complex | model.featureVal.single
model.featureVal_alternation =
  model.featureVal.complex_alternation
  | model.featureVal.single_alternation
model.featureVal_sequence =
  model.featureVal.complex_sequence, model.featureVal.single_sequence
model.featureVal_sequenceOptional =
  model.featureVal.complex_sequenceOptional?,
  model.featureVal.single_sequenceOptional?
model.featureVal_sequenceOptionalRepeatable =
  model.featureVal.complex_sequenceOptionalRepeatable*,
  model.featureVal.single_sequenceOptionalRepeatable*
model.featureVal_sequenceRepeatable =
  model.featureVal.complex_sequenceRepeatable+,
  model.featureVal.single_sequenceRepeatable+
model.biblPart =
  model.respLike
  | model.imprintPart
  | edition
  | extent
  | series
  | bibl
  | relatedItem
  | msIdentifier
  | textLang
model.biblPart_alternation =
  model.respLike_alternation
  | model.imprintPart_alternation
  | edition
  | extent
  | series
  | bibl
  | relatedItem
  | msIdentifier
  | textLang
model.biblPart_sequence =
  model.respLike_sequence,
  model.imprintPart_sequence,
  edition,
  extent,
  series,
  bibl,
  relatedItem,
  msIdentifier,
  textLang
model.biblPart_sequenceOptional =
  model.respLike_sequenceOptional?,
  model.imprintPart_sequenceOptional?,
  edition?,
  extent?,
  series?,
  bibl?,
  relatedItem?,
  msIdentifier?,
  textLang?
model.biblPart_sequenceOptionalRepeatable =
  model.respLike_sequenceOptionalRepeatable*,
  model.imprintPart_sequenceOptionalRepeatable*,
  edition*,
  extent*,
  series*,
  bibl*,
  relatedItem*,
  msIdentifier*,
  textLang*
model.biblPart_sequenceRepeatable =
  model.respLike_sequenceRepeatable+,
  model.imprintPart_sequenceRepeatable+,
  edition+,
  extent+,
  series+,
  bibl+,
  relatedItem+,
  msIdentifier+,
  textLang+
model.frontPart = model.frontPart.drama | divGen | titlePage
model.frontPart_alternation =
  model.frontPart.drama_alternation | divGen | titlePage
model.frontPart_sequence =
  model.frontPart.drama_sequence, divGen, titlePage
model.frontPart_sequenceOptional =
  model.frontPart.drama_sequenceOptional?, divGen?, titlePage?
model.frontPart_sequenceOptionalRepeatable =
  model.frontPart.drama_sequenceOptionalRepeatable*, divGen*, titlePage*
model.frontPart_sequenceRepeatable =
  model.frontPart.drama_sequenceRepeatable+, divGen+, titlePage+
model.addrPart = model.nameLike | addrLine | street | postCode | postBox
model.addrPart_alternation =
  model.nameLike_alternation | addrLine | street | postCode | postBox
model.addrPart_sequence =
  model.nameLike_sequence, addrLine, street, postCode, postBox
model.addrPart_sequenceOptional =
  model.nameLike_sequenceOptional?,
  addrLine?,
  street?,
  postCode?,
  postBox?
model.addrPart_sequenceOptionalRepeatable =
  model.nameLike_sequenceOptionalRepeatable*,
  addrLine*,
  street*,
  postCode*,
  postBox*
model.addrPart_sequenceRepeatable =
  model.nameLike_sequenceRepeatable+,
  addrLine+,
  street+,
  postCode+,
  postBox+
model.pPart.data =
  model.dateLike
  | model.measureLike
  | model.addressLike
  | model.nameLike
model.pPart.data_alternation =
  model.dateLike_alternation
  | model.measureLike_alternation
  | model.addressLike_alternation
  | model.nameLike_alternation
model.pPart.data_sequence =
  model.dateLike_sequence,
  model.measureLike_sequence,
  model.addressLike_sequence,
  model.nameLike_sequence
model.pPart.data_sequenceOptional =
  model.dateLike_sequenceOptional?,
  model.measureLike_sequenceOptional?,
  model.addressLike_sequenceOptional?,
  model.nameLike_sequenceOptional?
model.pPart.data_sequenceOptionalRepeatable =
  model.dateLike_sequenceOptionalRepeatable*,
  model.measureLike_sequenceOptionalRepeatable*,
  model.addressLike_sequenceOptionalRepeatable*,
  model.nameLike_sequenceOptionalRepeatable*
model.pPart.data_sequenceRepeatable =
  model.dateLike_sequenceRepeatable+,
  model.measureLike_sequenceRepeatable+,
  model.addressLike_sequenceRepeatable+,
  model.nameLike_sequenceRepeatable+
model.inter =
  model.egLike
  | model.oddDecl
  | model.biblLike
  | model.labelLike
  | model.listLike
  | model.stageLike
  | model.qLike
  | castList
model.inter_alternation =
  model.egLike_alternation
  | model.oddDecl_alternation
  | model.biblLike_alternation
  | model.labelLike_alternation
  | model.listLike_alternation
  | model.stageLike_alternation
  | model.qLike_alternation
  | castList
model.inter_sequence =
  model.egLike_sequence,
  model.oddDecl_sequence,
  model.biblLike_sequence,
  model.labelLike_sequence,
  model.listLike_sequence,
  model.stageLike_sequence,
  model.qLike_sequence,
  castList
model.inter_sequenceOptional =
  model.egLike_sequenceOptional?,
  model.oddDecl_sequenceOptional?,
  model.biblLike_sequenceOptional?,
  model.labelLike_sequenceOptional?,
  model.listLike_sequenceOptional?,
  model.stageLike_sequenceOptional?,
  model.qLike_sequenceOptional?,
  castList?
model.inter_sequenceOptionalRepeatable =
  model.egLike_sequenceOptionalRepeatable*,
  model.oddDecl_sequenceOptionalRepeatable*,
  model.biblLike_sequenceOptionalRepeatable*,
  model.labelLike_sequenceOptionalRepeatable*,
  model.listLike_sequenceOptionalRepeatable*,
  model.stageLike_sequenceOptionalRepeatable*,
  model.qLike_sequenceOptionalRepeatable*,
  castList*
model.inter_sequenceRepeatable =
  model.egLike_sequenceRepeatable+,
  model.oddDecl_sequenceRepeatable+,
  model.biblLike_sequenceRepeatable+,
  model.labelLike_sequenceRepeatable+,
  model.listLike_sequenceRepeatable+,
  model.stageLike_sequenceRepeatable+,
  model.qLike_sequenceRepeatable+,
  castList+
model.common = model.divPart | model.inter | model.entryLike
model.common_alternation =
  model.divPart_alternation
  | model.inter_alternation
  | model.entryLike_alternation
model.common_sequence =
  model.divPart_sequence, model.inter_sequence, model.entryLike_sequence
model.common_sequenceOptional =
  model.divPart_sequenceOptional?,
  model.inter_sequenceOptional?,
  model.entryLike_sequenceOptional?
model.common_sequenceOptionalRepeatable =
  model.divPart_sequenceOptionalRepeatable*,
  model.inter_sequenceOptionalRepeatable*,
  model.entryLike_sequenceOptionalRepeatable*
model.common_sequenceRepeatable =
  model.divPart_sequenceRepeatable+,
  model.inter_sequenceRepeatable+,
  model.entryLike_sequenceRepeatable+
model.phrase =
  model.segLike
  | model.highlighted
  | model.graphicLike
  | model.pPart.msdesc
  | model.pPart.edit
  | model.ptrLike
  | model.lPart
  | model.phrase.xml
  | model.specDescLike
  | model.pPart.data
  | model.ptrLike.form
model.phrase_alternation =
  model.segLike_alternation
  | model.highlighted_alternation
  | model.graphicLike_alternation
  | model.pPart.msdesc_alternation
  | model.pPart.edit_alternation
  | model.ptrLike_alternation
  | model.lPart_alternation
  | model.phrase.xml_alternation
  | model.specDescLike_alternation
  | model.pPart.data_alternation
  | model.ptrLike.form_alternation
model.phrase_sequence =
  model.segLike_sequence,
  model.highlighted_sequence,
  model.graphicLike_sequence,
  model.pPart.msdesc_sequence,
  model.pPart.edit_sequence,
  model.ptrLike_sequence,
  model.lPart_sequence,
  model.phrase.xml_sequence,
  model.specDescLike_sequence,
  model.pPart.data_sequence,
  model.ptrLike.form_sequence
model.phrase_sequenceOptional =
  model.segLike_sequenceOptional?,
  model.highlighted_sequenceOptional?,
  model.graphicLike_sequenceOptional?,
  model.pPart.msdesc_sequenceOptional?,
  model.pPart.edit_sequenceOptional?,
  model.ptrLike_sequenceOptional?,
  model.lPart_sequenceOptional?,
  model.phrase.xml_sequenceOptional?,
  model.specDescLike_sequenceOptional?,
  model.pPart.data_sequenceOptional?,
  model.ptrLike.form_sequenceOptional?
model.phrase_sequenceOptionalRepeatable =
  model.segLike_sequenceOptionalRepeatable*,
  model.highlighted_sequenceOptionalRepeatable*,
  model.graphicLike_sequenceOptionalRepeatable*,
  model.pPart.msdesc_sequenceOptionalRepeatable*,
  model.pPart.edit_sequenceOptionalRepeatable*,
  model.ptrLike_sequenceOptionalRepeatable*,
  model.lPart_sequenceOptionalRepeatable*,
  model.phrase.xml_sequenceOptionalRepeatable*,
  model.specDescLike_sequenceOptionalRepeatable*,
  model.pPart.data_sequenceOptionalRepeatable*,
  model.ptrLike.form_sequenceOptionalRepeatable*
model.phrase_sequenceRepeatable =
  model.segLike_sequenceRepeatable+,
  model.highlighted_sequenceRepeatable+,
  model.graphicLike_sequenceRepeatable+,
  model.pPart.msdesc_sequenceRepeatable+,
  model.pPart.edit_sequenceRepeatable+,
  model.ptrLike_sequenceRepeatable+,
  model.lPart_sequenceRepeatable+,
  model.phrase.xml_sequenceRepeatable+,
  model.specDescLike_sequenceRepeatable+,
  model.pPart.data_sequenceRepeatable+,
  model.ptrLike.form_sequenceRepeatable+
model.limitedPhrase =
  model.hiLike
  | model.emphLike
  | model.pPart.msdesc
  | model.pPart.editorial
  | model.ptrLike
  | model.phrase.xml
  | model.pPart.data
model.limitedPhrase_alternation =
  model.hiLike_alternation
  | model.emphLike_alternation
  | model.pPart.msdesc_alternation
  | model.pPart.editorial_alternation
  | model.ptrLike_alternation
  | model.phrase.xml_alternation
  | model.pPart.data_alternation
model.limitedPhrase_sequence =
  model.hiLike_sequence,
  model.emphLike_sequence,
  model.pPart.msdesc_sequence,
  model.pPart.editorial_sequence,
  model.ptrLike_sequence,
  model.phrase.xml_sequence,
  model.pPart.data_sequence
model.limitedPhrase_sequenceOptional =
  model.hiLike_sequenceOptional?,
  model.emphLike_sequenceOptional?,
  model.pPart.msdesc_sequenceOptional?,
  model.pPart.editorial_sequenceOptional?,
  model.ptrLike_sequenceOptional?,
  model.phrase.xml_sequenceOptional?,
  model.pPart.data_sequenceOptional?
model.limitedPhrase_sequenceOptionalRepeatable =
  model.hiLike_sequenceOptionalRepeatable*,
  model.emphLike_sequenceOptionalRepeatable*,
  model.pPart.msdesc_sequenceOptionalRepeatable*,
  model.pPart.editorial_sequenceOptionalRepeatable*,
  model.ptrLike_sequenceOptionalRepeatable*,
  model.phrase.xml_sequenceOptionalRepeatable*,
  model.pPart.data_sequenceOptionalRepeatable*
model.limitedPhrase_sequenceRepeatable =
  model.hiLike_sequenceRepeatable+,
  model.emphLike_sequenceRepeatable+,
  model.pPart.msdesc_sequenceRepeatable+,
  model.pPart.editorial_sequenceRepeatable+,
  model.ptrLike_sequenceRepeatable+,
  model.phrase.xml_sequenceRepeatable+,
  model.pPart.data_sequenceRepeatable+
model.divLike = \div
model.divLike_alternation = \div
model.divLike_sequence = \div
model.divLike_sequenceOptional = \div?
model.divLike_sequenceOptionalRepeatable = \div*
model.divLike_sequenceRepeatable = \div+
model.divGenLike = divGen
model.divGenLike_alternation = divGen
model.divGenLike_sequence = divGen
model.divGenLike_sequenceOptional = divGen?
model.divGenLike_sequenceOptionalRepeatable = divGen*
model.divGenLike_sequenceRepeatable = divGen+
model.div1Like = div1
model.div1Like_alternation = div1
model.div1Like_sequence = div1
model.div1Like_sequenceOptional = div1?
model.div1Like_sequenceOptionalRepeatable = div1*
model.div1Like_sequenceRepeatable = div1+
model.div2Like = div2
model.div2Like_alternation = div2
model.div2Like_sequence = div2
model.div2Like_sequenceOptional = div2?
model.div2Like_sequenceOptionalRepeatable = div2*
model.div2Like_sequenceRepeatable = div2+
model.div3Like = div3
model.div3Like_alternation = div3
model.div3Like_sequence = div3
model.div3Like_sequenceOptional = div3?
model.div3Like_sequenceOptionalRepeatable = div3*
model.div3Like_sequenceRepeatable = div3+
model.div4Like = div4
model.div4Like_alternation = div4
model.div4Like_sequence = div4
model.div4Like_sequenceOptional = div4?
model.div4Like_sequenceOptionalRepeatable = div4*
model.div4Like_sequenceRepeatable = div4+
model.div5Like = div5
model.div5Like_alternation = div5
model.div5Like_sequence = div5
model.div5Like_sequenceOptional = div5?
model.div5Like_sequenceOptionalRepeatable = div5*
model.div5Like_sequenceRepeatable = div5+
model.div6Like = div6
model.div6Like_alternation = div6
model.div6Like_sequence = div6
model.div6Like_sequenceOptional = div6?
model.div6Like_sequenceOptionalRepeatable = div6*
model.div6Like_sequenceRepeatable = div6+
model.div7Like = div7
model.div7Like_alternation = div7
model.div7Like_sequence = div7
model.div7Like_sequenceOptional = div7?
model.div7Like_sequenceOptionalRepeatable = div7*
model.div7Like_sequenceRepeatable = div7+
model.applicationLike = application
model.applicationLike_alternation = application
model.applicationLike_sequence = application
model.applicationLike_sequenceOptional = application?
model.applicationLike_sequenceOptionalRepeatable = application*
model.applicationLike_sequenceRepeatable = application+
model.teiHeaderPart = encodingDesc | profileDesc
model.teiHeaderPart_alternation = encodingDesc | profileDesc
model.teiHeaderPart_sequence = encodingDesc, profileDesc
model.teiHeaderPart_sequenceOptional = encodingDesc?, profileDesc?
model.teiHeaderPart_sequenceOptionalRepeatable =
  encodingDesc*, profileDesc*
model.teiHeaderPart_sequenceRepeatable = encodingDesc+, profileDesc+
model.sourceDescPart = scriptStmt | recordingStmt
model.sourceDescPart_alternation = scriptStmt | recordingStmt
model.sourceDescPart_sequence = scriptStmt, recordingStmt
model.sourceDescPart_sequenceOptional = scriptStmt?, recordingStmt?
model.sourceDescPart_sequenceOptionalRepeatable =
  scriptStmt*, recordingStmt*
model.sourceDescPart_sequenceRepeatable = scriptStmt+, recordingStmt+
model.encodingDescPart =
  projectDesc
  | samplingDecl
  | editorialDecl
  | tagsDecl
  | refsDecl
  | classDecl
  | appInfo
  | charDecl
  | metDecl
  | variantEncoding
  | geoDecl
  | fsdDecl
  | schemaSpec
model.encodingDescPart_alternation =
  projectDesc
  | samplingDecl
  | editorialDecl
  | tagsDecl
  | refsDecl
  | classDecl
  | appInfo
  | charDecl
  | metDecl
  | variantEncoding
  | geoDecl
  | fsdDecl
  | schemaSpec
model.encodingDescPart_sequence =
  projectDesc,
  samplingDecl,
  editorialDecl,
  tagsDecl,
  refsDecl,
  classDecl,
  appInfo,
  charDecl,
  metDecl,
  variantEncoding,
  geoDecl,
  fsdDecl,
  schemaSpec
model.encodingDescPart_sequenceOptional =
  projectDesc?,
  samplingDecl?,
  editorialDecl?,
  tagsDecl?,
  refsDecl?,
  classDecl?,
  appInfo?,
  charDecl?,
  metDecl?,
  variantEncoding?,
  geoDecl?,
  fsdDecl?,
  schemaSpec?
model.encodingDescPart_sequenceOptionalRepeatable =
  projectDesc*,
  samplingDecl*,
  editorialDecl*,
  tagsDecl*,
  refsDecl*,
  classDecl*,
  appInfo*,
  charDecl*,
  metDecl*,
  variantEncoding*,
  geoDecl*,
  fsdDecl*,
  schemaSpec*
model.encodingDescPart_sequenceRepeatable =
  projectDesc+,
  samplingDecl+,
  editorialDecl+,
  tagsDecl+,
  refsDecl+,
  classDecl+,
  appInfo+,
  charDecl+,
  metDecl+,
  variantEncoding+,
  geoDecl+,
  fsdDecl+,
  schemaSpec+
model.editorialDeclPart =
  correction
  | normalization
  | quotation
  | hyphenation
  | segmentation
  | stdVals
  | interpretation
model.editorialDeclPart_alternation =
  correction
  | normalization
  | quotation
  | hyphenation
  | segmentation
  | stdVals
  | interpretation
model.editorialDeclPart_sequence =
  correction,
  normalization,
  quotation,
  hyphenation,
  segmentation,
  stdVals,
  interpretation
model.editorialDeclPart_sequenceOptional =
  correction?,
  normalization?,
  quotation?,
  hyphenation?,
  segmentation?,
  stdVals?,
  interpretation?
model.editorialDeclPart_sequenceOptionalRepeatable =
  correction*,
  normalization*,
  quotation*,
  hyphenation*,
  segmentation*,
  stdVals*,
  interpretation*
model.editorialDeclPart_sequenceRepeatable =
  correction+,
  normalization+,
  quotation+,
  hyphenation+,
  segmentation+,
  stdVals+,
  interpretation+
model.profileDescPart =
  creation
  | langUsage
  | textClass
  | calendarDesc
  | handNotes
  | listTranspose
  | textDesc
  | particDesc
  | settingDesc
model.profileDescPart_alternation =
  creation
  | langUsage
  | textClass
  | calendarDesc
  | handNotes
  | listTranspose
  | textDesc
  | particDesc
  | settingDesc
model.profileDescPart_sequence =
  creation,
  langUsage,
  textClass,
  calendarDesc,
  handNotes,
  listTranspose,
  textDesc,
  particDesc,
  settingDesc
model.profileDescPart_sequenceOptional =
  creation?,
  langUsage?,
  textClass?,
  calendarDesc?,
  handNotes?,
  listTranspose?,
  textDesc?,
  particDesc?,
  settingDesc?
model.profileDescPart_sequenceOptionalRepeatable =
  creation*,
  langUsage*,
  textClass*,
  calendarDesc*,
  handNotes*,
  listTranspose*,
  textDesc*,
  particDesc*,
  settingDesc*
model.profileDescPart_sequenceRepeatable =
  creation+,
  langUsage+,
  textClass+,
  calendarDesc+,
  handNotes+,
  listTranspose+,
  textDesc+,
  particDesc+,
  settingDesc+
model.resourceLike = facsimile | sourceDoc | fsdDecl
model.resourceLike_alternation = facsimile | sourceDoc | fsdDecl
model.resourceLike_sequence = facsimile, sourceDoc, fsdDecl
model.resourceLike_sequenceOptional = facsimile?, sourceDoc?, fsdDecl?
model.resourceLike_sequenceOptionalRepeatable =
  facsimile*, sourceDoc*, fsdDecl*
model.resourceLike_sequenceRepeatable = facsimile+, sourceDoc+, fsdDecl+
model.orgStateLike = state
model.orgStateLike_alternation = state
model.orgStateLike_sequence = state
model.orgStateLike_sequenceOptional = state?
model.orgStateLike_sequenceOptionalRepeatable = state*
model.orgStateLike_sequenceRepeatable = state+
att.personal.attributes =
  att.naming.attributes,
  att.personal.attribute.full,
  att.personal.attribute.sort
att.personal.attribute.full =
  
  ## indicates whether the name component is given in full, as an
  ## abbreviation or simply as an initial.
  [ a:defaultValue = "yes" ]
  attribute full {
    
    ## the name component is spelled out in full.
    "yes"
    | 
      ## (abbreviated) the name component is given in an abbreviated form.
      "abb"
    | 
      ## (initial letter) the name component is indicated only by
      ## one initial.
      "init"
  }?
att.personal.attribute.sort =
  
  ## specifies the sort order of the name component in relation
  ## to others within the personal name.
  attribute sort { data.count }?
model.placeLike = place
model.placeLike_alternation = place
model.placeLike_sequence = place
model.placeLike_sequenceOptional = place?
model.placeLike_sequenceOptionalRepeatable = place*
model.placeLike_sequenceRepeatable = place+
# 2. elements

# 3. macros
macro.paraContent =
  (text | model.gLike | model.phrase | model.inter | model.global)*
macro.limitedContent = (text | model.limitedPhrase | model.inter)*
macro.phraseSeq = (text | model.gLike | model.phrase | model.global)*
macro.phraseSeq.limited = (text | model.limitedPhrase | model.global)*
macro.specialPara =
  (text
   | model.gLike
   | model.phrase
   | model.inter
   | model.divPart
   | model.global)*
macro.xtext = (text | model.gLike)*
data.certainty = "high" | "medium" | "low" | "unknown"
data.probability = xsd:double { minInclusive = "0" maxInclusive = "1" }
data.numeric =
  xsd:double
  | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
  | xsd:decimal
data.count = xsd:nonNegativeInteger
data.temporal.w3c =
  xsd:date
  | xsd:gYear
  | xsd:gMonth
  | xsd:gDay
  | xsd:gYearMonth
  | xsd:gMonthDay
  | xsd:time
  | xsd:dateTime
data.duration.w3c = xsd:duration
data.truthValue = xsd:boolean
data.xTruthValue = xsd:boolean | "unknown" | "inapplicable"
data.language = xsd:language
data.sex = "0" | "1" | "2" | "9"
data.namespace = xsd:anyURI
data.outputMeasurement =
  xsd:token {
    pattern =
      "[\-+]?\d+(\.\d+)?(%|cm|mm|in|pt|pc|px|em|ex|gd|rem|vw|vh|vm)"
  }
data.pattern = xsd:token
data.point =
  xsd:token { pattern = "(\-?[0-9]+\.?[0-9]*,\-?[0-9]+\.?[0-9]*)" }
data.pointer = xsd:anyURI
data.version = xsd:token { pattern = "[\d]+(\.[\d]+){0,2}" }
data.word = xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }
data.text = xsd:string
data.code = xsd:anyURI
data.name = xsd:Name
data.enumerated = data.name
data.temporal.iso =
  xsd:date
  | xsd:gYear
  | xsd:gMonth
  | xsd:gDay
  | xsd:gYearMonth
  | xsd:gMonthDay
  | xsd:time
  | xsd:dateTime
  | xsd:token { pattern = "[0-9.,DHMPRSTWYZ/:+\-]+" }
data.duration.iso = xsd:token { pattern = "[0-9.,DHMPRSTWYZ/:+\-]+" }
