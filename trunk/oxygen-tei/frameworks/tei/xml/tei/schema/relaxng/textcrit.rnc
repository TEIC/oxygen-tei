namespace rng = "http://relaxng.org/ns/structure/1.0"
namespace sch = "http://purl.oclc.org/dsdl/schematron"

# Schema generated 2013-01-17T19:45:23Z
# Edition: 2.3.0. Last updated on 17th January 2013.
# This material is dual-licensed.
# 
#	  [http://creativecommons.org/licenses/by/3.0/] 
#	    Distributed under a Creative Commons Attribution 3.0 Unported License.
# 
#	  [http://www.opensource.org/licenses/BSD-2-Clause] 
#	    Copyright 2013 TEI Consortium.
#	    All rights reserved.
# 
#	    Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
# 
#	      Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#	      Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
# 
# 
# 
# This software is provided by the copyright holders and contributors
# "as is" and any express or implied warranties, including, but not
# limited to, the implied warranties of merchantability and fitness for
# a particular purpose are disclaimed. In no event shall the copyright
# holder or contributors be liable for any direct, indirect, incidental,
# special, exemplary, or consequential damages (including, but not
# limited to, procurement of substitute goods or services; loss of use,
# data, or profits; or business interruption) however caused and on any
# theory of liability, whether in contract, strict liability, or tort
# (including negligence or otherwise) arising in any way out of the use
# of this software, even if advised of the possibility of such
# damage.
# 
#	  TEI  material can be licensed differently depending on the use you intend to 
# make of it. Hence it is made available under both the CC+BY and BSD-2 
# licences.  The CC+BY licence is generally appropriate for usages which 
# treat TEI content as data or documentation. The BSD-2 licence is 
# generally appropriate for usage of TEI content in a software 
# environment. For further information or clarification, please contact 
# the TEI Consortium.
# 
#	 Critical Apparatus

# Definitions from module textcrit

# Set global predeclared macros

# Set predeclared macros

# 0. predeclared macros

# 1. classes
model.rdgLike = rdg
model.rdgLike_alternation = rdg
model.rdgLike_sequence = rdg
model.rdgLike_sequenceOptional = rdg?
model.rdgLike_sequenceOptionalRepeatable = rdg*
model.rdgLike_sequenceRepeatable = rdg+
model.rdgPart = wit | witStart | witEnd | lacunaStart | lacunaEnd
model.rdgPart_alternation =
  wit | witStart | witEnd | lacunaStart | lacunaEnd
model.rdgPart_sequence = wit, witStart, witEnd, lacunaStart, lacunaEnd
model.rdgPart_sequenceOptional =
  wit?, witStart?, witEnd?, lacunaStart?, lacunaEnd?
model.rdgPart_sequenceOptionalRepeatable =
  wit*, witStart*, witEnd*, lacunaStart*, lacunaEnd*
model.rdgPart_sequenceRepeatable =
  wit+, witStart+, witEnd+, lacunaStart+, lacunaEnd+
att.rdgPart.attributes = att.rdgPart.attribute.wit
att.rdgPart.attribute.wit =
  
  ## (witness or witnesses) contains a list of one or more sigla indicating the witnesses
  ## which begin or end at this point.
  attribute wit {
    list { data.pointer+ }
  }?
att.witnessed.attributes = att.witnessed.attribute.wit
att.witnessed.attribute.wit =
  
  ## (witness or witnesses) contains a list of one or more pointers indicating the witnesses
  ## which attest to a given reading.
  attribute wit {
    list { data.pointer+ }
  }?
att.textCritical.attributes =
  att.responsibility.attributes,
  att.textCritical.attribute.type,
  att.textCritical.attribute.cause,
  att.textCritical.attribute.varSeq,
  att.textCritical.attribute.hand
att.textCritical.attribute.type =
  
  ## classifies the reading according to some useful typology.
  ## Sample values include: 1] substantive; 2] orthographic
  attribute type { data.enumerated }?
att.textCritical.attribute.cause =
  
  ## classifies the cause for the variant reading, according to
  ## any appropriate typology of possible origins.
  ## Sample values include: 1] homeoteleuton; 2] homeoarchy; 3] paleographicConfusion; 4] haplography; 5] dittography; 6] falseEmendation
  attribute cause { data.enumerated }?
att.textCritical.attribute.varSeq =
  
  ## (variant sequence) provides a number indicating the position of this reading in a
  ## sequence, when there is reason to presume a sequence to the variants
  ## on any one lemma.
  attribute varSeq { data.count }?
att.textCritical.attribute.hand =
  
  ## signifies the hand responsible for a particular reading in the
  ## witness.
  attribute hand { data.pointer }?
# 2. elements
app =
  
  ## (apparatus entry) contains one entry in a critical apparatus, with an optional
  ## lemma and usually one or more reading or a note on the relevant passage. []
  element app { app.content, app.localattributes }
app.content =
  (model.global*,
   (lem, model.global*, (wit, model.global*)?)?,
   ((model.rdgLike, model.global*, (wit, model.global*)?)
    | (rdgGrp, model.global*, (wit, model.global*)?))*)
  >> sch:pattern [
       id = "app-constraint-only1lem"
       "\x{a}" ~
       "         "
       sch:rule [
         context = "tei:app"
         "\x{a}" ~
         "            "
         sch:assert [
           test =
             "count( descendant::tei:lem[ generate-id(    current() ) = generate-id(    ancestor::tei:app[1] ) ]) <       2"
           "\x{a}" ~
           "Only one <lem> element may appear within a single  apparatus\x{a}" ~
           "entry, whether it appears outside a <rdgGrp>\x{a}" ~
           "element or within it."
         ]
         "\x{a}" ~
         "         "
       ]
       "\x{a}" ~
       "      "
     ]
app.localattributes =
  att.global.attributes,
  
  ## classifies the variation contained in this element according to
  ## some convenient typology.
  attribute type { data.enumerated }?,
  
  ## identifies the beginning of the lemma in the base text, if
  ## necessary.
  attribute from { data.pointer }?,
  
  ## identifies the endpoint of the lemma in the base text, if
  ## necessary.
  attribute to { data.pointer }?,
  
  ## (location) indicates the location of the variation, when the
  ## location-referenced method of apparatus markup is used.
  attribute loc {
    list { data.word+ }
  }?,
  empty
lacunaEnd =
  
  ## indicates the end of a lacuna in a mostly complete textual
  ## witness. []
  element lacunaEnd { lacunaEnd.content, lacunaEnd.localattributes }
lacunaEnd.content = empty
lacunaEnd.localattributes =
  att.global.attributes, att.rdgPart.attributes, empty
lacunaStart =
  
  ## indicates the beginning of a lacuna in the text of a mostly
  ## complete textual witness. []
  element lacunaStart {
    lacunaStart.content, lacunaStart.localattributes
  }
lacunaStart.content = empty
lacunaStart.localattributes =
  att.global.attributes, att.rdgPart.attributes, empty
lem =
  
  ## (lemma) contains the lemma, or base text, of a textual variation. []
  element lem { lem.content, lem.localattributes }
lem.content =
  (text
   | model.gLike
   | model.phrase
   | model.inter
   | model.global
   | model.rdgPart)*
lem.localattributes =
  att.global.attributes,
  att.textCritical.attributes,
  att.witnessed.attributes,
  empty
listApp =
  
  ## (list of apparatus entries) contains a list of apparatus entries.  []
  element listApp { listApp.content, listApp.localattributes }
listApp.content = model.headLike*, (app | listApp)+
listApp.localattributes =
  att.global.attributes,
  att.sortable.attributes,
  att.declarable.attributes,
  att.typed.attributes,
  empty
listWit =
  
  ## (witness list) lists definitions for all the witnesses referred to by a critical
  ##   apparatus, optionally grouped hierarchically. []
  element listWit { listWit.content, listWit.localattributes }
listWit.content = model.headLike?, (witness | listWit)+
listWit.localattributes =
  att.global.attributes, att.sortable.attributes, empty
rdg =
  
  ## (reading) contains a single reading within a textual variation. []
  element rdg { rdg.content, rdg.localattributes }
rdg.content =
  (text
   | model.gLike
   | model.phrase
   | model.inter
   | model.global
   | model.rdgPart)*
rdg.localattributes =
  att.global.attributes,
  att.textCritical.attributes,
  att.witnessed.attributes,
  empty
rdgGrp =
  
  ## (reading group) within a textual variation,
  ## groups two or more readings perceived to have a genetic
  ## relationship or other affinity. []
  element rdgGrp { rdgGrp.content, rdgGrp.localattributes }
rdgGrp.content =
  ((rdgGrp, wit?)
   | ((lem, wit?)?, (model.rdgLike, wit?))*)+
rdgGrp.localattributes =
  att.global.attributes, att.textCritical.attributes, empty
variantEncoding =
  
  ## declares the method used to encode text-critical variants. []
  element variantEncoding {
    variantEncoding.content, variantEncoding.localattributes
  }
variantEncoding.content = empty
variantEncoding.localattributes =
  att.global.attributes,
  
  ## indicates which method is used to encode the apparatus of
  ## variants.
  attribute method {
    
    ## apparatus uses line numbers or other canonical reference scheme
    ## referenced in a base text.
    "location-referenced"
    | 
      ## apparatus indicates the precise locations of the beginning and
      ## ending of each lemma relative to a base text.
      "double-end-point"
    | 
      ## alternate readings of a passage are given in parallel in the
      ## text; no notion of a base text is necessary.
      "parallel-segmentation"
  },
  
  ## indicates whether the apparatus appears within the running text
  ## or external to it.
  attribute location {
    
    ## apparatus appears within the running text.
    "internal"
    | 
      ## apparatus appears outside the base text.
      "external"
  },
  empty
wit =
  
  ## contains a list of one or more sigla of witnesses attesting a
  ## given reading, in a textual variation. []
  element wit { wit.content, wit.localattributes }
wit.content = macro.phraseSeq
wit.localattributes =
  att.global.attributes, att.rdgPart.attributes, empty
witDetail =
  
  ## (witness detail) gives further information about a particular witness, or
  ## witnesses, to a particular reading. []
  element witDetail { witDetail.content, witDetail.localattributes }
witDetail.content = macro.phraseSeq
witDetail.localattributes =
  att.global.attributes,
  att.placement.attributes,
  att.responsibility.attributes,
  att.pointing.attributes,
  
  ## (witnesses) indicates the sigil or sigla for the witnesses to which the
  ## detail refers.
  attribute wit {
    list { data.pointer+ }
  },
  
  ## describes the type of information given about the witness.
  attribute type { data.enumerated }?,
  empty
witEnd =
  
  ## (fragmented witness end) indicates the end, or suspension, of the text of a fragmentary
  ## witness. []
  element witEnd { witEnd.content, witEnd.localattributes }
witEnd.content = empty
witEnd.localattributes =
  att.global.attributes, att.rdgPart.attributes, empty
witStart =
  
  ## (fragmented witness start) indicates the beginning, or resumption, of the text of a
  ## fragmentary witness. []
  element witStart { witStart.content, witStart.localattributes }
witStart.content = empty
witStart.localattributes =
  att.global.attributes, att.rdgPart.attributes, empty
witness =
  
  ## contains either a description of a single witness referred to
  ## within the critical apparatus, or a list of witnesses which is to be
  ## referred to by a single sigil. []
  element witness { witness.content, witness.localattributes }
witness.content = macro.limitedContent
witness.localattributes =
  att.global.attributes, att.sortable.attributes, empty
# 3. macros
