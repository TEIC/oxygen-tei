<?xml version="1.0" encoding="utf-8"?>
<schema xmlns="http://purl.oclc.org/dsdl/schematron"
        xmlns:oxdoc="http://www.oxygenxml.com/ns/doc/xsl"
        queryBinding="xslt2">
   <title>ISO Schematron rules</title>
   <!--namespaces:--><ns prefix="tei" uri="http://www.tei-c.org/ns/1.0"/>
   <ns prefix="rng" uri="http://relaxng.org/ns/structure/1.0"/>
   <ns prefix="s" uri="http://www.ascc.net/xml/schematron"/>
   <ns prefix="sch" uri="http://purl.oclc.org/dsdl/schematron"/>
   <!--keys:--><!--patterns:--><!--constraints:--><pattern id="att.pointing-constraint-targetLang">
      <rule context="tei:*[@targetLang]">
            <assert test="count(@target)">@targetLang can only be used if @target is specified.</assert>
          </rule>
   </pattern>
   <pattern id="ptr-constraint-ptrAtts">
      <rule context="tei:ptr">
         <report test="@target and @cRef">Only one of the
	attributes 'target' and 'cRef' may be supplied.</report>
      </rule>
   </pattern>
   <pattern id="ref-constraint-refAtts">
      <rule context="tei:ref">
         <report test="@target and @cRef">Only one of the
	attributes 'target' and 'cRef' may be supplied.</report>
      </rule>
   </pattern>
   <pattern id="relatedItem-constraint-targetorcontent1">
      <rule context="tei:relatedItem">
         <report test="@target and count( child::* ) &gt; 0">If the 'target' attribute is used, the
        relatedItem element must be empty</report>
         <assert test="@target or child::*">A relatedItem element should have either a 'target' attribute
        or a child element to indicate the related bibliographic item</assert>
      </rule>
   </pattern>
   <pattern id="moduleRef-constraint-not-key-and-url">
      <rule context="tei:moduleRef">
                  <report test="@url and @key">
		    only the key= OR the url= attribute of ﹤moduleRef﹥ should be supplied, not both
		  </report>
                </rule>
   </pattern>
   <pattern id="moduleRef-constraint-not-include-and-except">
      <rule context="tei:moduleRef">
                  <report test="@except and @include">
		    only the exclude= OR the include= attribute of ﹤moduleRef﹥ should be supplied, not both
		  </report>
                </rule>
   </pattern>
   <pattern id="moduleRef-constraint-if-url-then-prefix">
      <rule context="tei:moduleRef[@url]">
                  <assert test="@prefix">
		    a ﹤moduleRef﹥ that uses the url= attribute should have a prefix= attribute, too
		  </assert>
                </rule>
   </pattern>
   <pattern id="moduleRef-constraint-modref">
      <rule context="tei:moduleRef">
        <report test="* and @key">
          child elements of moduleRef are only allowed when an external module
          is being loaded
        </report>
      </rule>
   </pattern>
   <pattern id="moduleRef-constraint-need-required">
      <rule context="@except">
                      <let name="exceptions" value="tokenize( ., '\s+' )"/>
                      
                      
                      
                      
                      
                      <report test="'TEI'=$exceptions">Removing ﹤TEI﹥ from your schema guarantees it is not TEI conformant</report>
                      <report test="'teiHeader'=$exceptions">Removing ﹤teiHeader﹥ from your schema guarantees it is not TEI conformant</report>
                      <report test="'fileDesc'=$exceptions">Removing ﹤fileDesc﹥ from your schema guarantees it is not TEI conformant</report>
                      <report test="'titleStmt'=$exceptions">Removing ﹤titleStmt﹥ from your schema guarantees it is not TEI conformant</report>
                      <report test="'title'=$exceptions">Removing ﹤title﹥ from your schema guarantees it is not TEI conformant</report>
                      <report test="'publicationStmt'=$exceptions">Removing ﹤publicationStmt﹥ from your schema guarantees it is not TEI conformant</report>
                      <report test="'sourceDesc'=$exceptions">Removing ﹤sourceDesc﹥ from your schema guarantees it is not TEI conformant</report>
                    </rule>
   </pattern>
   <pattern id="moduleRef-constraint-not-same-prefix">
      <rule context="tei:moduleRef">
	        <report test="//*[ not( generate-id(.) eq generate-id(      current() ) ) ]/@prefix = @prefix">The prefix attribute
	    of a moduleRef element should not match that of any other
	    element (it would defeat the purpose)</report>
          </rule>
   </pattern>
   <pattern id="schemaSpec-constraint-required-modules">
      <rule context="tei:schemaSpec">
         <assert test="tei:moduleRef[@key='tei']       and       tei:moduleRef[@key='core']      and       tei:moduleRef[@key='header']    and       tei:moduleRef[@key='textstructure']">
		  missing one or more of the required modules (tei, core, header, textstructure).
		</assert>
      </rule>
   </pattern>
   <pattern id="schemaSpec-constraint-no-outside-specs">
      <rule context="tei:classSpec[not(ancestor::tei:schemaSpec)]        | tei:elementSpec[not(ancestor::tei:schemaSpec)]        | tei:macroSpec[not(ancestor::tei:schemaSpec)]        ">
                  <assert test="//tei:schemaSpec//tei:specGrpRef[         substring-after( normalize-space(@target),'#') =         current()/@xml:id]">﹤<name/>﹥ should be in ﹤schemaSpec﹥
		  or referred to from within ﹤schemaSpec﹥</assert>
                </rule>
   </pattern>
   <pattern id="elementSpec-constraint-module-except-when-add">
      <rule context="tei:elementSpec">
         <assert test="@mode">in a customization ODD, the
		mode= attribute of ﹤elementSpec﹥ should be
		specified</assert>
         <report test="not( @module ) and not( @mode='add'       )">the module= attribute of ﹤elementSpec﹥ must be
		specified anytime the mode= is not 'add'</report>
      </rule>
   </pattern>
   <pattern id="elementSpec-constraint-dont-delete-required">
      <rule context="tei:elementSpec">
         <report test="@mode='delete' and @ident='TEI'">Removing ﹤TEI﹥ from your schema guarantees it is not TEI conformant</report>
         <report test="@mode='delete' and @ident='teiHeader'">Removing ﹤teiHeader﹥ from your schema guarantees it is not TEI conformant</report>
         <report test="@mode='delete' and @ident='fileDesc'">Removing ﹤fileDesc﹥ from your schema guarantees it is not TEI conformant</report>
         <report test="@mode='delete' and @ident='titleStmt'">Removing ﹤titleStmt﹥ from your schema guarantees it is not TEI conformant</report>
         <report test="@mode='delete' and @ident='title'">Removing ﹤title﹥ from your schema guarantees it is not TEI conformant</report>
         <report test="@mode='delete' and @ident='publicationStmt'">Removing ﹤publicationStmt﹥ from your schema guarantees it is not TEI conformant</report>
         <report test="@mode='delete' and @ident='sourceDesc'">Removing ﹤sourceDesc﹥ from your schema guarantees it is not TEI conformant</report>
      </rule>
   </pattern>
   <pattern id="elementSpec-constraint-elementspec-in-module">
      <rule context="tei:elementSpec">
         <assert test="not( @module )               or               //tei:moduleSpec[ @ident = current()/@module ]               or               //tei:moduleRef[ @key = current()/@module ]">Element <value-of select="@ident"/>: the value of the module attribute ("<value-of select="@module"/>") should correspond to an existing module, via a moduleSpec or moduleRef</assert>
      </rule>
   </pattern>
   <pattern id="classSpec-constraint-classspec-in-module">
      <rule context="tei:classSpec">
         <assert test="not( @module )               or               //tei:moduleSpec[ @ident = current()/@module ]               or               //tei:moduleRef[ @key = current()/@module ]">Class <value-of select="@ident"/>: the value of the module attribute ("<value-of select="@module"/>") should correspond to an existing module, via a moduleSpec or moduleRef</assert>
      </rule>
   </pattern>
   <pattern id="macroSpec-constraint-macrospec-in-module">
      <rule context="tei:macroSpec">
         <assert test="not( @module )               or               //tei:moduleSpec[ @ident = current()/@module ]               or               //tei:moduleRef[ @key = current()/@module ]">Macro <value-of select="@ident"/>: the value of the module attribute ("<value-of select="@module"/>") should correspond to an existing module, via a moduleSpec or moduleRef</assert>
      </rule>
   </pattern>
   <pattern id="altIdent-constraint-altIdent-only-NCName">
      <rule context="tei:altIdent">
         <assert test="(  parent::tei:attDef       or parent::tei:classSpec       or parent::tei:constraintSpec       or parent::tei:elementSpec       or parent::tei:macroSpec       or parent::tei:moduleSpec       or parent::tei:schemaSpec       ) and       (normalize-space(.) castable as xs:NCName)">
		  The content of ﹤altIdent﹥ should be an XML Name (w/o
		  a namespace prefix), unless a child of ﹤valItem﹥
		(and even then, it's not a bad idea :-)</assert>
      </rule>
   </pattern>
   <pattern id="constraintSpec-constraint-sch">
      <rule context="tei:constraintSpec">
         <report test="tei:constraint/s:* and    not(@scheme='schematron')">
	Rules in the Schematron 1.* language must be inside
	a constraint with a value of 'schematron' on the scheme attribute
      </report>
      </rule>
   </pattern>
   <pattern id="constraintSpec-constraint-isosch">
      <rule context="tei:constraintSpec">
         <report test="tei:constraint/sch:* and    not(@scheme='isoschematron')">
	Rules in the ISO Schematron language must be inside
	a constraint with a value of 'isoschematron' on the scheme attribute
      </report>
      </rule>
   </pattern>
   <pattern id="attDef-constraint-attDefContents">
      <rule context="tei:attDef">
         <assert test="   @mode eq 'change'       or @mode eq 'delete'       or tei:datatype       or tei:valList[@type='closed']       ">Attribute: the definition of the @<value-of select="@ident"/> attribute in the <value-of select="ancestor::*[@ident][1]/@ident"/>
            <value-of select="' '"/>
            <value-of select="local-name(ancestor::*[@ident][1])"/> should have a closed valList or a datatype</assert>
      </rule>
   </pattern>
</schema>
