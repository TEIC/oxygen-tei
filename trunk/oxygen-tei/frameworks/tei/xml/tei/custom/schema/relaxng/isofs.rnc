default namespace = "http://www.tei-c.org/ns/1.0"
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace ns1 = "http://www.isocat.org/ns/dcr"
namespace ns2 = "http://purl.oclc.org/dsdl/schematron"
namespace rng = "http://relaxng.org/ns/structure/1.0"
namespace xlink = "http://www.w3.org/1999/xlink"

# Schema generated from ODD source 2012-06-18T08:02:11Z. 
# Edition: 2.1.0. Last updated on 17th June 2012.
# Edition Location: http://www.tei-c.org/Vault/P5/2.1.0/
#

# This template file is freely available and you are
# hereby authorised to copy, modify, and redistribute it in
# any way without further reference or permissions.
# When making such modifications, you are strongly
# recommended to change the present text to include an
# accurate statement of the licencing conditions applicable
# to your modified text.
macro.limitedContent = (text | model.limitedPhrase | model.inter)*
macro.xtext = (text | model.gLike)*
data.numeric =
  xsd:double
  | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
  | xsd:decimal
data.truthValue = xsd:boolean
data.pointer = xsd:anyURI
data.word = xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }
data.name = xsd:Name
data.enumerated = data.name
att.datcat.attributes =
  att.datcat.attribute.datcat, att.datcat.attribute.valueDatcat
att.datcat.attribute.datcat =
  
  ## contains a PID (persistent identifier) that aligns the given element with the appropriate 
  ##         Data Category (or categories) in ISOcat.
  attribute ns1:datcat {
    list { data.pointer, data.pointer* }
  }?
att.datcat.attribute.valueDatcat =
  
  ## contains a PID (persistent identifier) that aligns the content of the given
  ##         element or the value of the given attribute with the appropriate simple Data
  ##         Category (or categories) in ISOcat.
  attribute ns1:valueDatcat {
    list { data.pointer, data.pointer* }
  }?
model.global.meta = fs | fLib | fvLib
model.global.meta_alternation = fs | fLib | fvLib
model.global.meta_sequence = fs, fLib, fvLib
model.global.meta_sequenceOptional = fs?, fLib?, fvLib?
model.global.meta_sequenceOptionalRepeatable = fs*, fLib*, fvLib*
model.global.meta_sequenceRepeatable = fs+, fLib+, fvLib+
model.gLike = notAllowed
model.featureVal.complex = fs | vColl | vNot | vMerge
model.featureVal.complex_alternation = fs | vColl | vNot | vMerge
model.featureVal.complex_sequence = fs, vColl, vNot, vMerge
model.featureVal.complex_sequenceOptional = fs?, vColl?, vNot?, vMerge?
model.featureVal.complex_sequenceOptionalRepeatable =
  fs*, vColl*, vNot*, vMerge*
model.featureVal.complex_sequenceRepeatable =
  fs+, vColl+, vNot+, vMerge+
model.featureVal.single =
  binary | symbol | numeric | \string | vLabel | \default | vAlt
model.featureVal.single_alternation =
  binary | symbol | numeric | \string | vLabel | \default | vAlt
model.featureVal.single_sequence =
  binary, symbol, numeric, \string, vLabel, \default, vAlt
model.featureVal.single_sequenceOptional =
  binary?, symbol?, numeric?, \string?, vLabel?, \default?, vAlt?
model.featureVal.single_sequenceOptionalRepeatable =
  binary*, symbol*, numeric*, \string*, vLabel*, \default*, vAlt*
model.featureVal.single_sequenceRepeatable =
  binary+, symbol+, numeric+, \string+, vLabel+, \default+, vAlt+
model.divPart = notAllowed
model.divPart_alternation = notAllowed
model.divPart_sequence = empty
model.divPart_sequenceOptional = empty
model.divPart_sequenceOptionalRepeatable = empty
model.divPart_sequenceRepeatable = notAllowed
model.featureVal = model.featureVal.complex | model.featureVal.single
model.inter = notAllowed
model.inter_alternation = notAllowed
model.inter_sequence = empty
model.inter_sequenceOptional = empty
model.inter_sequenceOptionalRepeatable = empty
model.inter_sequenceRepeatable = notAllowed
model.limitedPhrase = notAllowed
fsdDecl =
  
  ## (feature system declaration) provides a feature system declaration comprising one or more
  ##   feature structure declarations or feature structure declaration links. [18.11. ]
  element fsdDecl { (fsDecl | fsdLink)+ }
fsDecl =
  
  ## (feature structure declaration) declares one type of feature structure. [18.11. ]
  element fsDecl {
    (fsDescr?, fDecl+, fsConstraints?),
    
    ## gives a name for the type of feature structure being declared.
    attribute type { data.enumerated },
    
    ## gives the name of one or more typed feature structures
    ##	from which this type inherits feature specifications and
    ##	constraints; 	
    ##	if this type includes a feature specification
    ##	with the same name as that of any of those specified by this
    ##	attribute, or if more than one specification of the same name
    ##	is inherited, then the set of possible values is defined by
    ##	unification. Similarly, the set of constraints applicable is
    ##	derived by combining those specified explicitly within this
    ##	element with those implied by the baseTypes
    ##	attribute. When no baseTypes attribute is specified, no
    ##	feature specification or constraint is inherited.
    ##  
    ##       
    attribute baseTypes {
      list { data.name, data.name* }
    }?,
    empty
  }
fsDescr =
  
  ## (feature system description (in FSD)) describes in prose what is represented by the type of feature
  ## structure declared in the enclosing fsDecl. [18.11. ]
  element fsDescr { macro.limitedContent }
fsdLink =
  
  ## (feature structure declaration link) associates the name of a typed feature structure with a feature
  ## structure declaration for it. [18.11. ]
  element fsdLink {
    empty,
    
    ## identifies the type of feature structure to be documented;
    ##       this will be the value of the type attribute on at least one
    ## feature structure.
    attribute type { data.enumerated },
    
    ## supplies a pointer to a feature structure declaration
    ##       (fsDecl) element within the current document or elsewhere. 
    attribute target { data.pointer },
    empty
  }
fDecl =
  
  ## (feature declaration) declares a single feature, specifying its name, organization,
  ## range of allowed values, and optionally its default value. [18.11. ]
  element fDecl {
    (fDescr?, vRange, vDefault?),
    
    ## indicates the name of the feature being declared; matches the
    ## name attribute of f elements in the text.
    attribute name { data.name },
    
    ## indicates whether or not the value of this feature may
    ##	be present.
    [ a:defaultValue = "true" ] attribute optional { xsd:boolean }?,
    empty
  }
fDescr =
  
  ## (feature description (in FSD)) describes in prose what is represented by the feature being
  ## declared and its values. [18.11. ]
  element fDescr { macro.limitedContent }
vRange =
  
  ## (value range) defines the range of allowed values for a feature, in the form of
  ## an fs, vAlt, or primitive value;
  ## for the value of an f to be valid, it must be
  ## subsumed by the specified range; if the f
  ## contains multiple values (as sanctioned by the org attribute),
  ## then each value must be subsumed by the vRange. [18.11. ]
  element vRange { model.featureVal }
vDefault =
  
  ## (value default) declares the default value to be supplied when a feature structure
  ## does not contain an instance of f for this name; if
  ## unconditional, it is specified as one (or, depending on the value of
  ## the org attribute of the enclosing fDecl) more
  ## fs elements or primitive values;
  ## if conditional, it is specified as
  ## one or more if elements; if no default is specified, or no
  ## condition matches, the value none is assumed. [18.11. ]
  element vDefault { model.featureVal+ | if+ }
if =
  
  ## defines a conditional default value for a feature; the condition
  ## is specified as a feature structure, and is met if it
  ## subsumes the feature structure in the text for which a
  ## default value is sought. [18.11. ]
  element if { (fs | f), then, model.featureVal }
then =
  
  ## separates the condition from the default in an if, or
  ## the antecedent and the consequent in a cond element. [18.11. ]
  element then { empty }
fsConstraints =
  
  ## (feature-structure constraints) specifies constraints on the content of valid feature
  ## structures. [18.11. ]
  element fsConstraints { (cond | bicond)* }
cond =
  
  ## (conditional feature-structure constraint) defines a conditional feature-structure constraint; the consequent
  ## and the antecedent are specified as feature structures or
  ## feature-structure collections; the constraint is satisfied if both the
  ## antecedent and the consequent subsume a given feature
  ## structure, or if the antecedent does not. [18.11. ]
  element cond { (fs | f), then, (fs | f) }
bicond =
  
  ## (bi-conditional feature-structure constraint) defines a biconditional feature-structure constraint; both
  ## consequent and antecedent are specified as feature structures or groups
  ## of feature structures; the constraint is satisfied if both
  ## subsume a given feature structure, or if both do not. [18.11. ]
  element bicond { (fs | f), iff, (fs | f) }
iff =
  
  ## (if and only if) separates the condition from the consequence in a bicond
  ## element. [18.11. ]
  element iff { empty }
fs =
  
  ## (feature structure) represents a feature structure, that is, a
  ##   collection of feature-value pairs organized as a
  ## structural unit. [18.2. ]
  element fs {
    f*,
    att.datcat.attributes,
    
    ## specifies the type of the feature structure.
    attribute type { data.enumerated }?,
    
    ## (features) references the feature-value specifications making up this feature structure.
    attribute feats {
      list { data.pointer, data.pointer* }
    }?,
    empty
  }
f =
  
  ## (feature) represents a feature value specification, that
  ##   is, the association of a name with a value of any of several different types. [18.2. ]
  element f {
    ((text | model.gLike | model.featureVal)*)
    >> ns2:pattern [
         id = "f-constraint-fValConstraints"
         "\x{a}" ~
         "            "
         ns2:rule [
           context = "tei:fVal"
           "\x{a}" ~
           "               "
           ns2:assert [
             test = "not(tei:* and text)"
             " A feature value cannot\x{a}" ~
             "    contain both text and element content"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> ns2:pattern [
         id = "f-constraint-fValConstraints"
         "\x{a}" ~
         "            "
         ns2:rule [
           context = "tei:fVal"
           "\x{a}" ~
           "               "
           ns2:report [
             test = "count(tei:*)>1"
             " A feature value can contain\x{a}" ~
             "    only one child element"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.datcat.attributes,
    
    ## provides a name for the feature.
    attribute name { data.name },
    
    ## (feature value) references any element which can be used to represent the
    ##   value of a feature.
    attribute fVal { data.pointer }?,
    empty
  }
binary =
  
  ## (binary value) represents the value part of a feature-value specification which can contain either
  ##   of exactly two possible values. [18.2. ]
  element binary {
    empty,
    att.datcat.attributes,
    
    ## supplies a binary value.
    attribute value { data.truthValue },
    empty
  }
symbol =
  
  ## (symbolic value) represents the value part of a feature-value specification
  ##   which contains one of a finite list of symbols. [18.3. ]
  element symbol {
    empty,
    att.datcat.attributes,
    
    ## supplies the symbolic value for the feature, one of a finite list that
    ## may be specified in a feature declaration.
    attribute value { data.word },
    empty
  }
numeric =
  
  ## (numeric value) represents the value part of a feature-value specification
  ##   which contains a numeric value or range. [18.3. ]
  element numeric {
    empty,
    att.datcat.attributes,
    
    ## supplies a lower bound for the numeric value represented,
    ##       and also (if max is not supplied) its upper bound.
    attribute value { data.numeric },
    
    ## supplies an upper bound for the numeric value represented.
    attribute max { data.numeric }?,
    
    ## specifies whether the value represented should be
    ##	  truncated to give an integer value.
    attribute trunc { data.truthValue }?,
    empty
  }
\string =
  
  ## (string value) represents the value part of a feature-value specification
  ##   which contains a string. [18.3. ]
  element string { macro.xtext, att.datcat.attributes, empty }
vLabel =
  
  ## (value label) represents the value part of a feature-value specification
  ##   which appears at more than one point in a feature structure.
  element vLabel {
    model.featureVal?,
    
    ## supplies a name for the sharing point.
    attribute name { data.word },
    empty
  }
vColl =
  
  ## (collection of values) represents the value part of a feature-value specification
  ##   which contains multiple values organized as a set, bag, or list.
  element vColl {
    (fs | model.featureVal.single)*,
    
    ## (organization) indicates organization of given value or values as  set, bag or list.
    attribute org {
      
      ## indicates that the given values are organized as a set.
      ##    
      "set"
      | 
        ## indicates that the given values are organized as a
        ## bag (multiset).
        ##    
        "bag"
      | 
        ## indicates that the given values are organized as a
        ## list.
        "list"
    }?,
    empty
  }
\default =
  
  ## (default feature value) represents the value part of a feature-value specification
  ##   which contains a defaulted value. [18.9. ]
  element default { empty }
vAlt =
  
  ## (value alternation) represents the value part of a feature-value specification
  ##   which contains a set of values, only one of which can be valid. [18.8.1. ]
  element vAlt { model.featureVal, model.featureVal+ }
vNot =
  
  ## (value negation) represents a feature value which is the negation of its content. [18.8.2. ]
  element vNot { model.featureVal }
vMerge =
  
  ## (merged collection of values) represents a feature value which is the result of merging
  ##   together the feature values contained by its children, using the organization
  ##   specified by the org attribute. [18.8.3. ]
  element vMerge {
    model.featureVal+,
    
    ## indicates the organization of the resulting merged values as  set, bag or list.
    attribute org {
      
      ## indicates that the resulting values are organized as a set.
      "set"
      | 
        ## indicates that the resulting values are organized as a bag (multiset).
        ##    
        "bag"
      | 
        ## indicates that the resulting values are organized as a list.
        "list"
    }?,
    empty
  }
fLib =
  
  ## (feature library) assembles a library of feature elements. [18.4. ]
  element fLib {
    (f+)
    >> ns2:ns [ prefix = "tei" uri = "http://www.tei-c.org/ns/1.0" ]
  }
fvLib =
  
  ## (feature-value library) assembles a library of reusable feature value elements
  ##   (including complete feature structures). [18.4. ]
  element fvLib { model.featureVal* }
start = fs | fvLib | fLib
