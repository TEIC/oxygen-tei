<?xml version="1.0" encoding="utf-8"?>
<project basedir="." default="dist" name="teitooo">
<!--
	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License as published by the Free Software Foundation; either
	version 2.1 of the License, or (at your option) any later version.
	
	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	Lesser General Public License for more details.
	
	You should have received a copy of the GNU Lesser General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
	
        Id: $Id: build.xml 8944 2011-06-13 14:33:07Z rahtz $
        Copyright: 2011, TEI Consortium<
-->
  <!--
 Convert TEI documents into OO files.
 -->
  <!-- Path to TEI XML file. -->
  <property name="inputFile" value=""/>
  <!-- Path where the output oo file will be saved. -->
  <property name="outputFile" value=""/>
  <!-- which profile -->
  <property name="profile" value="default"/>
  <!-- which language -->
  <property name="lang" value="en"/>
  <!-- where does oxygen keep stuff -->
  <property name="oxygenlib" value=""/>
  <!-- Oxygen patch: Make visible the defaultSource transformation parameter from ODD2ODD -->
  <property name="defaultSource" value=""/>
  <!-- Stylesheet for transformation -->
  <property name="stylesheetFile"  value="../profiles/${profile}/odt/to.xsl"/>
  <property name="listgraphics"    value="../tools2/makegraphicsanttask.xsl"/>
  <property name="odd2oddxsl"      value="../odds2/odd2odd.xsl"/>
  <property name="odd2litexsl"     value="../odds2/odd2lite.xsl"/>
  <dirname property="inputFileDir" file="${inputFile}"/>
  <dirname property="outputDir"    file="${outputFile}"/>
  <dirname property="xslDir"       file="${stylesheetFile}"/>
  <property name="outputTempDir"   value="${outputDir}/temp-dir-for-ant"/>

  <path id="classpath">
    <pathelement path="${java.class.path}"/>
  </path>

  <!--  <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>-->
  <condition property="processODD">
    <equals arg1="${odd}" arg2="true"/>
  </condition>

  <target name="setup">
    <taskdef name="images" classname="ImageTask" classpath="../tools2/ImageInfo/ImageInfo.jar"/>
    <delete dir="${outputTempDir}"/>
    <mkdir  dir="${outputTempDir}"/>
  </target>

  <target name="notodd" unless="processODD">
    <copy file="${inputFile}" tofile="${outputTempDir}/tmp2.xml" overwrite="true"/>
  </target>

  <target name="odd" if="processODD">
    <echo>Do ODD processing</echo>
    <xslt force="yes" style="${odd2oddxsl}" in="${inputFile}" out="${outputTempDir}/tmp1.xml" classpath="classpath">
      <xmlcatalog>
        <catalogpath>
          <pathelement location="../../../../catalog.xml"/>
          <pathelement location="../../../../../xhtml11/dtd/xhtmlcatalog.xml"/>
        </catalogpath>
      </xmlcatalog>
      <factory name="net.sf.saxon.TransformerFactoryImpl"/>
      <classpath location="${oxygyenlib}/saxon9ee.jar"/>
      <param name="lang" expression="${lang}" if="lang"/>
      <param name="verbose" expression="${verbose}" if="verbose"/>
      <param name="defaultSource" expression="${defaultSource}" if="defaultSource"/>
    </xslt>
    <xslt force="yes" style="${odd2litexsl}" in="${outputTempDir}/tmp1.xml" out="${outputTempDir}/tmp2.xml" classpath="classpath">
      <factory name="net.sf.saxon.TransformerFactoryImpl"/>
      <classpath location="${oxygyenlib}/saxon9ee.jar"/>
      <xmlcatalog>
        <catalogpath>
          <pathelement location="../../../../catalog.xml"/>
          <pathelement location="../../../../../xhtml11/dtd/xhtmlcatalog.xml"/>
        </catalogpath>
      </xmlcatalog>
      <param name="displayMode" expression="rnc"/>
      <param name="summaryDoc" expression="true"/>
    </xslt>
  </target>

  <target name="dist" depends="setup,odd,notodd">
    <!-- Recreate temporary output directory -->
    <!-- The transformation for OO output. -->
    <echo level="info">unzip ODT template</echo>
    <unzip src="${xslDir}/template.odt" dest="${outputTempDir}"/>
    <echo level="info">Get names of graphics files and write an ant task</echo>
    <xslt force="yes" style="${listgraphics}" classpath="classpath" in="${outputTempDir}/tmp2.xml" out="${outputTempDir}/copy.xml">
      <xmlcatalog>
        <catalogpath>
          <pathelement location="../../../../catalog.xml"/>
          <pathelement location="../../../../../xhtml11/dtd/xhtmlcatalog.xml"/>
        </catalogpath>
      </xmlcatalog>
      <factory name="net.sf.saxon.TransformerFactoryImpl"/>
      <classpath location="${oxygyenlib}/saxon9ee.jar"/>
      <param name="inputDir" expression="${inputFileDir}"/>
      <param name="mediaDir" expression="Pictures"/>
    </xslt>
    <echo level="info">Copy image files by running ant task</echo>
    <ant antfile="${outputTempDir}/copy.xml"/>
    <echo level="info">Read dimensions of image files and write info file</echo>
    <images outputFile="${outputTempDir}/image-size-info.xml">
      <fileset dir="${outputTempDir}" includes="Pictures/*.*"/>
    </images>
    <echo level="info">XSLT generate files for oo </echo>
    <xslt force="yes" style="${stylesheetFile}" in="${outputTempDir}/tmp2.xml" out="${outputTempDir}/newdocument.xml" classpath="classpath">
      <xmlcatalog>
        <catalogpath>
          <pathelement location="../../../../catalog.xml"/>
          <pathelement location="../../../../../xhtml11/dtd/xhtmlcatalog.xml"/>
        </catalogpath>
      </xmlcatalog>
      <factory name="net.sf.saxon.TransformerFactoryImpl"/>
      <classpath location="${oxygyenlib}/saxon9ee.jar"/>
      <param name="outputDir" expression="file:///${outputTempDir}"/>
      <param name="freestanding" expression="true"/>
      <!-- supply name of language-->
      <param name="lang" expression="${lang}" if="lang"/>
      <!-- emit some diagnostics"-->
      <param name="debug" expression="${debug}" if="debug"/>
      <!-- be verbose-->
      <param name="verbose" expression="${verbose}" if="verbose"/>
    </xslt>
    <move file="${outputTempDir}/newdocument.xml" tofile="${outputTempDir}/content.xml" overwrite="true"/>
    <echo level="info">ZIP: put files from ${outputTempDir} together into ${outputFile}</echo>
    <zip destfile="${outputDir}/temp-for-ant.zip" basedir="${outputTempDir}" compress="true" excludes="tmp1.xml,tmp2.xml,image-size-info.xml,copy.xml"/>
    <copy file="${outputDir}/temp-for-ant.zip" tofile="${outputFile}" overwrite="true"/>
    <delete file="${outputDir}/temp-for-ant.zip"/>
    <delete dir="${outputTempDir}"/>
  </target>
</project>
