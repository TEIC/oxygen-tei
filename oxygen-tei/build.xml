<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="documentation" name="oxygen-tei" xmlns:if="ant:if"
  xmlns:unless="ant:unless">
  
  <property name="echo.separator" value="***********************************************************"/>
<!-- Location of the release packages of P5 on GitHub. -->
  <!--<property name="SFP5" value="http://downloads.sourceforge.net/project/tei/TEI-P5-all"/> -->
  <!-- Release path is: https://github.com/TEIC/TEI/releases/download/P5_Release_3.0.0/tei-3.0.0.zip -->
  <property name="GHP5" value="https://github.com/TEIC/TEI/releases/download"/>
  
<!-- Location of the release packages of the TEI Stylesheets on GitHub. -->
  <!--<property name="SFXSL" value="http://downloads.sourceforge.net/project/tei/Stylesheets"/>-->
  <!--  Release path is: https://github.com/TEIC/Stylesheets/releases/download/v7.41.0/tei-xsl-7.41.0.zip -->
  <property name="GHXSL" value="https://github.com/TEIC/Stylesheets/releases/download"/>
  
<!-- OLD: Where TEI releases of the plugin are available for download. -->
  <property name="sfReleaseLocation" value="http://sourceforge.net/projects/tei/files/oxygen-tei/"/>
  
  <!-- NEW: Where TEI releases of the plugin are available for download. -->
  <property name="ghReleaseLocation" value="https://github.com/TEIC/oxygen-tei/releases/download/"/>
  
<!--  Where the updateSite.oxygen files live on tei-c.org. -->
  <property name="p5VaultLocation" value="/data2/Vault/P5"/>
  
<!-- The base name of the package we create. -->
  <property name="packageFilePrefix" value="oxygen-tei"/>
  
  <target name="documentation">
    <echo message="${echo.separator}"/>
    <echo>
THIS IS STILL IN DEVELOPMENT, INCOMPLETE AND UNTESTED, 
     
This build file is intended to build all or any of the versions of the 
TEI plugin for Oxygen. Currently these are:

syncro: Builds the plugin for the Syncro team to include with a release
        of Oxygen. This discovers the current stable versions of P5 
        and the Stylesheets, gets them, and builds with them.
        
bleeding: This is intended to run on the TEI's Jenkins build servers, 
          and creates a version of the plugin (with an accompanying 
          updateSite.oxygen file) based on the latest trunk builds of 
          P5 and the Stylesheets from the same build server.
          
release: This builds the plugin in the same way as the syncro job 
        (with the latest stable versions), but also offers to upload 
        the result to the TEI's SourceForge repo to become a release 
        of the TEI-maintained version of the plugin. This also creates 
        an updated updateSite.oxygen file, by retrieving the latest 
        updateSite.oxygen file from the tei-c.org site, and asks the 
        user to provide the new version number before creating a 
        new version of updateSite.oxygen. It also offers to upload that 
        file to tei-c.org, if the user has shell access.

stable: This is also intended to run on the TEI's Jenkins build 
        servers, and builds a version of the plugin which should be 
        identical to "release", but is packaged with its own 
        updateSite.oxygen file, to which TEI developers can subscribe 
        for testing. The purpose of this is so that we can regularly 
        test how the plugin would work if a release were created.
        
      
    </echo>
    <echo message="${echo.separator}"/>
  </target>
  
  <target name="init">
    <echo message="${echo.separator}"/>
    <hostinfo/>
    <property name="hostname" value="${NAME}.${DOMAIN}"/>
    <echo message="Running on host ${hostname}..."/>
    <tstamp>
      <format property="now" pattern="yyyy-MM-dd-kkmmss"/>
    </tstamp>
  </target>
  
  <target name="getStableVersionNums">
    <echo message="${echo.separator}"/>
    <echo message="Retrieving version numbers of current stable releases..."/>
    <get src="https://www.tei-c.org/Vault/P5/current/xml/tei/odd/VERSION" 
      dest="p5Version" 
      usetimestamp="true"/>
<!--   Trim this version number; the file often has a return or two in it. -->
    <replaceregexp file="p5Version" match="\s+" replace="" flags="g"/>
    <loadfile property="p5Version" srcFile="p5Version"/>
    <exec executable="/bin/bash" outputproperty="stylesheetsVersion">
      <arg value="-c"/>
      <arg value='git ls-remote --tags https://github.com/TEIC/Stylesheets.git | egrep -o "([0-9]+\.)+[0-9]+" | sort -t . -k 1,1n -k 2,2n -k 3,3n | tail -n1'/>
    </exec>
    <echo message="P5 stable release version is: ${p5Version}"/>
    <echo message="Stylesheets stable release version is: ${stylesheetsVersion}"/>
    <echo message="${echo.separator}"/>
  </target>
  
  <target name="getStableVersions" depends="getStableVersionNums">
    <echo message="${echo.separator}"/>
    <!--    P5_Release_3.0.0/tei-3.0.0.zip -->
    <property name="p5Zip" value="${GHP5}/P5_Release_${p5Version}/tei-${p5Version}.zip"/>
    <echo message="Retrieving ${p5Zip}"/>
    <get src="${p5Zip}" dest="tei.zip" usetimestamp="true"/>
    <echo message="${echo.separator}"/>
    <!--    https://github.com/TEIC/Stylesheets/releases/download/v7.41.0/tei-xsl-7.41.0.zip -->
    <property name="stylesheetsZip" value="${GHXSL}/v${stylesheetsVersion}/tei-xsl-${stylesheetsVersion}.zip"/>
    <echo message="Retrieving ${stylesheetsZip}"/>
    <get src="${stylesheetsZip}" dest="xsl.zip" usetimestamp="true"/>
  </target>
  
  <target name="clean">
    <echo message="${echo.separator}"/>
    <echo message="Cleaning up from any previous build..."/>
    <delete dir="frameworks/tei/xml/tei/Test"/>
    <delete dir="frameworks/tei/xml/tei/custom/odd"/>
    <delete dir="frameworks/tei/xml/tei/custom/schema"/>
    <delete dir="frameworks/tei/xml/tei/odd"/>
    <delete dir="frameworks/tei/xml/tei/schema"/>
    <delete dir="frameworks/tei/xml/tei/stylesheet"/>
    <delete dir="frameworks/tei/xml/tei/xquery"/>
    <delete dir="frameworks/tei/templates"/>
    <delete file="tei-c.org/updateSite.oxygen"/>
    <delete file="tei-c.org/updateSite.oxygen_OLD"/>
    <echo message="${echo.separator}"/>
  </target>
  
  <!-- Per Alex J 2020-08-18: we need to download appropriate 
         versions of two files into the lib folder. 
         NOTE: THESE VERSION NUMBERS WILL INEVITABLY HAVE TO
         BE UPDATED AT SOME POINT.
  -->
  <target name="getJars">
    <echo message="${echo.separator}"/>
    <echo message="Retrieving required jar files..."/>
    <get src="https://www.oxygenxml.com/maven/com/oxygenxml/oxygen/21.0.0.0/oxygen-21.0.0.0.jar" dest="lib/oxygen.jar"/>
    <get src="https://www.oxygenxml.com/maven/com/oxygenxml/oxygen-annotations/21.0.0.0/oxygen-annotations-21.0.0.0.jar" dest="lib/oxygen-annotations.jar"/>
  </target>
  
  <target name="unpackZips">
    <echo message="${echo.separator}"/>
    <echo message="Unpacking zip files of P5 and Stylesheets..."/>
    <unzip src="tei.zip" dest="frameworks/tei"/>
    <unzip src="xsl.zip" dest="frameworks/tei"/>
    <echo message="Removing unwanted bits of the downloaded packages..."/>
    <delete>
      <fileset dir="frameworks/tei/xml/tei/Exemplars" includes="*epub *html *pdf *tex *compiled"/>
    </delete>
    <delete>
      <fileset dir="frameworks/tei/xml/tei/odd" includes="p5subset.j* p5attlist.txt *.css p5odds-examples.*"/>
    </delete>
    <delete dir="frameworks/tei/doc"/>
    <delete dir="frameworks/tei/xml/tei/Test"/>
    <delete dir="frameworks/tei/xml/tei/odd/ReleaseNotes"/>
    <delete dir="frameworks/tei/xml/tei/odd/Source"/>
    <delete dir="frameworks/tei/xml/tei/odd/Exemplars"/>
    <delete dir="frameworks/tei/xml/tei/Exemplars"/>
    <delete dir="frameworks/tei/xml/tei/odd/Utilities"/>
    <delete dir="frameworks/tei/xml/tei/odd/webnav"/>
    <delete dir="frameworks/tei/xml/tei/xquery"/>
    <echo message="Moving a couple of things around..."/>
    <mkdir dir="frameworks/tei/templates/TEI P5"/>
    <move todir="frameworks/tei/templates/TEI P5">
      <fileset dir="frameworks/tei/xml/tei/custom/templates" includes="*"/>
    </move>
    <delete>
      <fileset dir="frameworks/tei/templates/TEI P5" includes="tei_*.doc.xml pom.xml"/>
    </delete>
    <mkdir dir="frameworks/tei/templates/TEI jTEI"/>
    <copy todir="frameworks/tei/templates/TEI jTEI">
      <fileset dir="frameworks/tei/templates/TEI P5" includes="jTEI*Article.*"/>
    </copy>
    <mkdir dir="frameworks/tei/templates/TEI ODD"/>
    <copy todir="frameworks/tei/templates/TEI ODD">
      <fileset dir="frameworks/tei/templates/TEI P5" includes="ODD*customization.* TEI*Customizations.*"/>
    </copy>
    <echo message="${echo.separator}"/>
  </target>
  
  <target name="doBuild">
    <echo message="${echo.separator}"/>
    <echo message="Running the actual plugin build operation..."/>
    <ant antfile="build.xml" dir="frameworks/tei"/>
  </target>
  
  <target name="copyDist">
    <echo message="${echo.separator}"/>
    <property name="outputZip" value="${packageFilePrefix}-${p5Version}-${stylesheetsVersion}.zip"/>
    <echo message="Copying dist file to ${outputZip}..."/>
    <copy file="frameworks/tei/dist/tei.zip" tofile="${outputZip}"/>
    <echo message="The output file is: ${outputZip}."/>
    <echo message="${echo.separator}"/>
  </target>
  
  <target name="syncro" depends="init, getStableVersions, clean, getJars, unpackZips, doBuild, copyDist">
    <echo message="${echo.separator}"/>
    <echo message="Done!"/>
    <echo message="${echo.separator}"/>
  </target>
  
  <target name="createTeiOxygenUpdateFile">
    <echo message="${echo.separator}"/>
    <echo message="Retrieving the current version of the Oxygen update file."/>
    <get src="https://www.tei-c.org/release/oxygen/updateSite.oxygen" 
      dest="tei-c.org/updateSite.oxygen_OLD" 
      usetimestamp="true"/>
    <echo message="Finding out the last version number..."/>
<!--  NOTE: We have to do this at the command line because we can't assume that 
    saxon is in the path, and we don't want the hassle of redistributing saxon9he. -->
    <exec executable="/bin/bash">
      <arg value="-c"/>
      <arg value="java -jar lib/saxon9he.jar -s:tei-c.org/updateSite.oxygen_OLD -xsl:tei-c.org/updateSite.xsl"/>
    </exec>
    <loadfile property="lastVersion" srcFile="lastVersion"/>
    <echo message="Previous release version of this plugin was ${lastVersion}."/>
    <echo>
Figure out the new version based on these criteria:

If there is a new P5 version, increment the first digit 
   and set the second and third to zero.
   
If there is a new Stylesheets version, increment the 
   second digit and set the third to zero.
   
If there are only changes to the plugin code itself, 
   increment the third digit.
    </echo>
    <input message="Please input the new version number in x.y.z form."
      addproperty="newVersion"/>
    <condition property="goodVersionNumber">
      <matches pattern="[0-9]+\.[0-9]+\.[0-9]+" string="${newVersion}"/>
    </condition>
    <fail message="${newVersion} is not a valid version number." unless="goodVersionNumber"/>
    
    <property name="newZipFileName" value="${packageFilePrefix}-${newVersion}.zip"/>
    <property name="saxonCommand" value="java -jar lib/saxon9he.jar -s:tei-c.org/updateSite.oxygen_OLD -xsl:tei-c.org/updateSite.xsl -o:tei-c.org/updateSite.oxygen proposedVersionNumber=${newVersion} ghReleaseLocation=${ghReleaseLocation} newZipFileName=${packageFilePrefix}-${p5Version}-${stylesheetsVersion}.zip"/>
    <echo message="Running Saxon to create new updateSite.oxygen file:"/>
    <echo message="${saxonCommand}"/>
    <exec executable="/bin/bash" failonerror="true">
      <arg value="-c"/>
      <arg value="${saxonCommand}"/>
    </exec>
    <echo>
Created file tei-c.org/updateSite.oxygen, which will need to 
be uploaded to the tei-c.org site. You will have the option 
to do this later, but you can also do it manually.
    </echo>
    <echo message="${echo.separator}"/>
  </target>
  
  <target name="uploadToSourceForge">
    <!-- NOTE: This is uurrrgly, but we do want to make sure nothing gets uploaded to SF by 
    accident, and we don't try to upload without a user name. -->
    <input
      message="The build will now be uploaded to SourceForge. Are you sure you want to do this?"
      validargs="y,n"
      defaultvalue="n"
      addproperty="okToUpload"
    />
    <condition property="doUpload">
      <and>
        <isset property="okToUpload" />
        <equals arg1="${okToUpload}" arg2="y" />
      </and>
    </condition>
    <input if:true="${doUpload}" message="What is your SourceForge user name?"
      defaultvalue=""
      addproperty="sfUserName"/>
    <length property="sfUserNameLength" string="${sfUserName}"/>
    <condition property="readyToUpload">
      <and>
        <isset property="okToUpload" />
        <equals arg1="${okToUpload}" arg2="y" />
        <not>
          <equals arg1="${sfUserNameLength}" arg2="0" />
        </not>
      </and>
    </condition>
    <exec executable="/bin/bash" failonerror="true" if:true="${readyToUpload}">
      <arg value="-c"/>
      <!--      Used this commented-out version for local testing. -->
      <!--<arg value="rsync -e ssh ${outputZip} mholmes@spud.hcmc.uvic.ca:/home/mholmes/Desktop/${outputZip}"/>-->
<!--     NOTE: Why is the line below not using the $sfReleaseLocation property? Figure this out. -->
      <arg value="rsync -e ssh ${outputZip} ${sfUserName},tei@frs.sourceforge.net:/home/frs/project/t/te/tei/oxygen-tei/${newZipFileName}"/>
    </exec>
    <echo message="ABORTED the upload to SourceForge." unless:true="${readyToUpload}"/>
    <echo message="User declined to proceed." unless:true="${doUpload}"/>
  </target>
  
  <target name="uploadOxygenUpdateFile">
    <echo message="${echo.separator}"/>
    <echo>
You now have the option of uploading the updateSite.oxygen file to the
tei-c.org server. You should proceed with this only if you're sure everything
has worked well. You will need shell access to tei-c.org.
    </echo>
    <input
      message="Are you sure you want to do this?"
      validargs="y,n"
      defaultvalue="n"
      addproperty="okToUploadToTei"
    />
    <condition property="doUploadToTei">
      <and>
        <isset property="okToUploadToTei" />
        <equals arg1="${okToUploadToTei}" arg2="y" />
      </and>
    </condition>
    <exec executable="/bin/bash" failonerror="true" if:true="${doUploadToTei}">
      <arg value="-c"/>
<!--     Commented-out version used for testing locally. -->
      <!--<arg value="rsync -e ssh tei-c.org/updateSite.oxygen mholmes@spud.hcmc.uvic.ca:/home/mholmes/Desktop/updateSite.oxygen"/>-->
      <arg value="rsync -e ssh tei-c.org/updateSite.oxygen tei@cchum-kvm-dockerteic.in2p3.fr:${p5VaultLocation}/current/oxygen/updateSite.oxygen"/>
    </exec>
    <echo message="${echo.separator}"/>
  </target>
  
  
<!--  This target creates a build of the plugin ready for release on 
      SourceForge. It uses stable versions of P5 and the Stylesheets,
      and at the end of the process, generates a new version of the 
      updateSite.oxygen file based on the one currently on tei-c.org.
      It offers to upload the package to SF, and the updateSite.oxygen
      file to tei-c.org.
  -->
  <target name="release" depends="init, getStableVersions, clean, getJars, unpackZips, doBuild, copyDist, createTeiOxygenUpdateFile, uploadToSourceForge">
    <echo message="${echo.separator}"/>
    <echo message="Done!"/>
    <echo message="Now go to GitHub and create a new release on the model of the previous release, and upload the binary zip file you have just created. When you have done that, run 'ant uploadOxygenUpdateFile' to push the release file up to the TEI server."/>
    <echo message="${echo.separator}"/>
  </target>
  
  <target name="transformStableUpdateFile">
    <echo message="${echo.separator}"/>
    <echo message="Adding new build to updateSite.oxygen file."/>
    <property environment="env"/>
    <property name="buildNumber" value="${env.BUILD_NUMBER}"/>
    <property name="stableSaxonCommand" value="java -jar lib/saxon9he.jar -s:updateSite.oxygen -xsl:jenkins/updateSite.xsl -o:updateSite.oxygen teiVersionNumber=${p5Version} jenkinsBuildNumber=${buildNumber} currBuild=${now} hostname=${hostname} newZipFileName=${outputZip} jenkinsJobSuffix=stable"/>
    <echo message="Running Saxon to create new updateSite.oxygen file:"/>
    <echo message="${stableSaxonCommand}"/>
    <exec executable="/bin/bash" failonerror="true">
      <arg value="-c"/>
      <arg value="${stableSaxonCommand}"/>
    </exec>
    <echo message="${echo.separator}"/>
  </target>
  
  <target name="getLastJenkinsUpdateFile">
    <echo message="${echo.separator}"/>
    <echo message="Trying to retrieve a previous updateSite.oxygen file from a previous Jenkins build..."/>
    <copy file="../../builds/lastSuccessfulBuild/archive/oxygen-tei/updateSite.oxygen"
      tofile="updateSite.oxygen" failonerror="false"/>
    <!--    Now this needs to work on a brand-new Jenkins server which may not have 
          an existing file. -->
    <antcall target="getUpdateFileIfMissing"/>
    <echo message="${echo.separator}"/>
  </target>
  
  <!--  This target is built on Jenkins, but uses stable release versions
      of P5 and the Stylesheets. The result is archived on Jenkins and 
      can be subscribed to through an updateSite.oxygen file. -->
  <target name="stable" depends="init, getStableVersions, clean, getJars, unpackZips, doBuild, copyDist, getLastJenkinsUpdateFile, transformStableUpdateFile">
    <echo message="${echo.separator}"/>
    <echo message="Done!"/>
    <echo message="${echo.separator}"/>
  </target>
  
  <target name="getLatestJenkinsBuildInformation">
    <echo message="${echo.separator}"/>
    <property name="p5JenkinsBuild" value="../../../TEIP5-dev/lastSuccessful/archive/P5/"/>
    <property name="p5JenkinsVersionFile" value="${p5JenkinsBuild}release/doc/tei-p5-doc/VERSION"/>
    <!--   Trim this version number; the file often has a return or two in it. -->
    <copy file="${p5JenkinsBuild}release/doc/tei-p5-doc/VERSION" tofile="p5JenkinsVersion"/>
    <replaceregexp file="p5JenkinsVersion" match="\s+" replace="" flags="g"/>
    <loadfile property="p5JenkinsVersion" srcFile="p5JenkinsVersion"/>
    <echo message="Latest P5 version built on Jenkins is: ${p5JenkinsVersion}"/>
    
    <property name="stylesheetsJenkinsBuild" value="../../../Stylesheets-dev/lastSuccessful/archive/"/>
    <property name="stylesheetsJenkinsVersionFile" value="${stylesheetsJenkinsBuild}dist/doc/tei-xsl/VERSION"/>
    
    <copy file="${stylesheetsJenkinsBuild}dist/doc/tei-xsl/VERSION" tofile="stylesheetsJenkinsVersion"/>
    <!--   Trim this version number; the file often has a return or two in it. -->
    <replaceregexp file="stylesheetsJenkinsVersion" match="\s+" replace="" flags="g"/>
    
    <loadfile property="stylesheetsJenkinsVersion" srcFile="stylesheetsJenkinsVersion"/>
   
    <echo message="Latest Stylesheets version built on Jenkins is: ${stylesheetsJenkinsVersion}"/>
    <echo message="${echo.separator}"/>
  </target>
  
  <target name="checkUpdateFilePresent">
    <available file="updateSite.oxygen" property="updateSitePresent"/>
  </target>
  
  <target name="getUpdateFileIfMissing" depends="checkUpdateFilePresent" unless="updateSitePresent">
    <copy file="jenkins/updateSite.oxygen" tofile="updateSite.oxygen"/>
  </target>
  
  <target name="getLatestJenkinsVersions" depends="getLatestJenkinsBuildInformation">
    <echo message="${echo.separator}"/>
    <echo message="Retrieving latest P5 and Stylesheets builds from Jenkins jobs."/>
    <copy file="${p5JenkinsBuild}tei-${p5JenkinsVersion}.zip"
                tofile="tei.zip"/>
    <copy file="${stylesheetsJenkinsBuild}tei-xsl-${stylesheetsJenkinsVersion}.zip"
      tofile="xsl.zip"/>
    <echo message="${echo.separator}"/>
  </target>
  
  <target name="createBleedingDistFile">
    <echo message="${echo.separator}"/>
    <property name="bleedingZip" value="oxygen-tei-${p5JenkinsVersion}-${stylesheetsJenkinsVersion}-${now}.zip"/>
    <copy file="frameworks/tei/dist/tei.zip" tofile="${bleedingZip}"/>
    <echo message="${echo.separator}"/>
  </target>
  
  <target name="transformBleedingUpdateFile">
    <echo message="${echo.separator}"/>
    <echo message="Adding new build to updateSite.oxygen file."/>
    <property environment="env"/>
    <property name="buildNumber" value="${env.BUILD_NUMBER}"/>
    <property name="bleedingSaxonCommand" value="java -jar lib/saxon9he.jar -s:updateSite.oxygen -xsl:jenkins/updateSite.xsl -o:updateSite.oxygen teiVersionNumber=${p5JenkinsVersion} jenkinsBuildNumber=${buildNumber} currBuild=${now} hostname=${hostname} newZipFileName=${bleedingZip} jenkinsJobSuffix=bleeding"/>
    <echo message="Running Saxon to create new updateSite.oxygen file:"/>
    <echo message="${bleedingSaxonCommand}"/>
    <exec executable="/bin/bash" failonerror="true">
      <arg value="-c"/>
      <arg value="${bleedingSaxonCommand}"/>
    </exec>
    <echo message="${echo.separator}"/>
  </target>
  
  <target name="bleeding" depends="init, getLatestJenkinsVersions, clean, getJars, unpackZips, doBuild, createBleedingDistFile, getLastJenkinsUpdateFile, transformBleedingUpdateFile">
    <echo message="${echo.separator}"/>
    <echo message="Done!"/>
    <echo message="${echo.separator}"/>
  </target>
  
</project>
